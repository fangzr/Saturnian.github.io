<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saturnus&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hust.life/"/>
  <updated>2018-04-08T16:05:55.341Z</updated>
  <id>http://hust.life/</id>
  
  <author>
    <name>Peter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>四月：考研复习进行时（一）</title>
    <link href="http://hust.life/2018/04/08/life-2018-04-08-4month-summary/"/>
    <id>http://hust.life/2018/04/08/life-2018-04-08-4month-summary/</id>
    <published>2018-04-08T15:59:00.000Z</published>
    <updated>2018-04-08T16:05:55.341Z</updated>
    
    <content type="html"><![CDATA[<p>无论什么时候，只要你有一个目标，你就得牺牲一定的自由去实现它。<br>-毛姆</p>]]></content>
    
    <summary type="html">
    
      Whenever you hanve an aim you must sacrifice something of freedom to attain it. -W.S.Maugham
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>一月:考试月总结</title>
    <link href="http://hust.life/2018/01/25/life-2018-01-25-1month-summary/"/>
    <id>http://hust.life/2018/01/25/life-2018-01-25-1month-summary/</id>
    <published>2018-01-25T15:00:00.000Z</published>
    <updated>2018-01-26T05:23:51.682Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>下面是我在考试期间出现的可以借鉴的的好的行为习惯，提高了学习效率：</p></div><table><thead><tr><th>好的习惯/方法</th><th>好习惯的具体描述</th><th>提示</th></tr></thead><tbody><tr><td>早睡早起</td><td><strong>这是最重要的好习惯</strong>，以下各种好习惯必须建立在早睡早起的基础之上。睡前效率最低，只能用来做一些全天总结性的工作，如回忆一天所学知识。浪费睡前半小时，你将用第二天上午2小时来恢复自己的效率。形成极其规律的作息时间，可以让你该睡觉的时间必须睡觉，该醒来学习时保持清醒和自制力</td><td>好习惯之“母”</td></tr><tr><td>严格限制上网时间</td><td><strong>重要性仅次于“早睡早起”。上网就给自己冲一块钱网费，尽量不上网、不带手机、平板自习。或者二者只带其一。</strong></td><td>不被网络糟糕的庞大的无聊信息干扰，是保持效率的关键点。</td></tr><tr><td>上课认真听课</td><td>老师讲课内容，往往是经过反复斟酌、备课得到的结果。光靠自学难以把握轻重。请坚持听老师讲课，不要开小差，千万不要上课时候分心！</td><td>就算是听不懂，也要坚持跟随老师讲课进度，给自己留个大致印象，复习事半功倍！</td></tr><tr><td>认真完成老师布置的作业</td><td>考试试题基本是作业的变形题，你必须独立完成它们。</td><td>工科学生学好就两个诀窍：“动手”和“动脑”，后者更加重要</td></tr><tr><td>“广而不钻”</td><td>大学考试考察重点是学生对知识点掌握范围，而不是像高中一样考察一些技巧性极强的东西。相比高中，你必须要注重课本知识点覆盖，千万不要过分钻牛角尖，但是重点概念必须搞得一清二楚。记住：去努力覆盖知识点，而不是纠结那些书本上的细枝末节！至于什么是重点，请参考老师出题考试范围和上课强调的概念</td><td>覆盖知识点、快速多遍地刷书本知识</td></tr><tr><td>知识地图（MAP)</td><td>总结书本重点公式、总结它们之间的联系、应用。最后复习有奇效，可以让你“快速多遍”过程加快N多。</td><td>对于内容繁多、公式繁多、章节之间环环相扣的那种专业课效果显著。这是华科电信系黄佳庆老师推荐给我的学习方法，非常好！</td></tr><tr><td>做好计划</td><td>把每天计划写在小本本上面。写好时间范围。做完就划掉。</td><td>完成任务要给自己一种满足感，要给自己一种奖励。这种奖励的快感来自于“划掉任务后对自己执行力的信心以及感觉自己没有虚度人生的充实感”</td></tr><tr><td>做好复习笔记</td><td>小本本、便携式笔记本适用于考试周复习。平时还是要认真写好上课笔记和复习笔记。</td><td>虽然往往上课听不懂，但是通过反复总结笔记，最后自己掌握得也不比学霸们差！</td></tr><tr><td>约自习</td><td>一定要找到一起考研的研友自习，效率翻倍，这不是夸张。</td><td>一定要找坚定考研的、基础比较扎实的研友，拒绝摇摆！</td></tr></tbody></table><div class="note warning"><p>下面是我在考试期间出现的不好的行为习惯，严重影响了学习效率：</p></div><table><thead><tr><th>不好的习惯</th><th>描述</th><th>如何克服</th></tr></thead><tbody><tr><td>自习中途玩手机、分心</td><td>自习40min，开始玩30min手机/看小说。结果学习效率超级低！</td><td>克制自己，自习途中不玩手机。中午可以看一下小说，晚上自己回来可以上一下网。争取大部分时间都拿去自习</td></tr><tr><td>熬夜</td><td>12点后还不上床，第二天一定会犯困</td><td>早睡早起精力充沛</td></tr><tr><td>不合理发泄精力</td><td>不要熬夜上网、不要熬夜看电影</td><td>人的精力有限，需要克制自己，时刻提醒自己保持最佳状态</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      这次考试月，从复习计算机网络开始算起，差不多两个月复习时间。有一些复习方法值得自己记下来，执行下去；有些不好的学习方法需要摈弃、改进；有些严重影响学习效率的问题要及时纠正、严厉地改掉不好的习惯。
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>重要的不是翻墙有多难 而是已经没人想要翻墙</title>
    <link href="http://hust.life/2018/01/06/life-2018-01-06-across-gfw/"/>
    <id>http://hust.life/2018/01/06/life-2018-01-06-across-gfw/</id>
    <published>2018-01-06T04:00:00.000Z</published>
    <updated>2018-01-06T04:15:26.419Z</updated>
    
    <content type="html"><![CDATA[<p>今天，代理又坏了。我和几个朋友又打开微信群，开始讨论如果它就此死掉，下一步我们该换什么别的方法。<br>最近几个月，这个只聊翻墙问题的群常常被顶在微信第一页。</p><p>我现在在用的这个工具一个月60块钱。乍一看，这个数字不高。可如果你从好几年前就开始尝试翻墙，一步步的为这件事花越来越多的钱，就会觉得这个价格其实不低。更为重要的是，当现在我再和人们讨论起“我一个月花在翻墙上的钱有60块”时，绝大多数人的反应都是“WOW，那真是太贵了。”</p><p>其实我特别能理解这件事，因为在大多数人眼里，翻墙本来就不应该花钱。</p><p>早些年，翻墙确实不需要花钱，一个在线代理就搞定了，而且是纯免费的。那时候翻墙需求非常小，不仅是因为那年大家普遍知道的少，更因为那年需要翻墙的网站特别少。偶尔碰到一个打不开的，在线代理输一下地址，看两眼，关掉网页，就算完事了。而随着六七年来多的令人费解的网站一个又一个的变成了404，翻墙，才成了一件不得已而为之的事情。</p><p>很多人一听到我抱怨付费的翻墙工具又不好用了，就存在感满满的跑来跟我说自己的免费VPN还很好用。对于这样的人，我历来连回复都懒得写。还在用VPN尤其是免费VPN的人，通常还处在翻墙最最基础的阶段，根本不足以谈论这件事。时至今日，你做许多许多事都要翻墙，甚至看个外国大学官网登登人家的博物馆都要翻墙，请问你每天要连线和断线VPN多少次呢？你耐得住那个烦吗？</p><p>如果你承认你其实耐不过那个烦，也就罢了。可如果有人还不知好歹的说自己很耐烦，那才叫贻笑大方。事实上，正因为VPN这种翻墙方式实在太过繁琐和不便，才导致几年以来，常翻墙，愿翻墙，能翻墙，知道翻墙的人越来越少。如果你想不通为什么会这样，你应该了解这样一句话：不要尝试对抗自己的人性。</p><p>今天当代理又坏掉而大家又围在一起吐槽时，我说了一句看上去特别傻逼的话，可这句话却很残酷的是对的。</p><p>我说：当我们这群想翻墙愿意为翻墙花钱的人都在一次又一次面对人性中有关失败、挫折、无效努力和麻烦的考验时，全中国常态翻墙的网民可能已经只有总人数的千分之一了，甚至更低。</p><p>这不是自以为是，也不是装逼，而是一句实话。</p><p>几年的时间足以改变许多的事情，时至今日，绝大多数网民都已经丢失了翻墙这种习惯。一来，他们中间有很多人根本不知道翻墙能带来什么好处。二来，国内互联网尤其是移动互联网的爆炸式发展，确实在很短的时间里就创造出了足以弥补那些该页无法访问们缺口的产品。哪怕，缺口可能只是用泥巴勉强给糊上的。</p><p>每当我说出诸如“连我都……可想而知有多少人会……”的句式时，总会遭受到一些精英分子的白眼。原因是，这些尊贵的精英们地位之高，所拥有之多，根本不会使他们面对与我和我的同辈们一样的问题。可是，难道仅仅因为他们的世界里什么问题都没有发生，世界就一片太平了吗？</p><p>我常常想起过去我曾经举过的例子。当我放言时常读书的人仅占总人口5%的论调时，那些常读书的知识分子往往对我百般冷嘲热讽。原因只因为，他们身边都是读书人。可是如果我们真正仔细的环顾周围乃至将目光努力放的更长远一些，就会发现读书在当今本来就是一些近乎奢侈的事情，更不要提常读书了。任何一个人都绝不能因为自己身边的读书人多，就尝试否认中国全民频繁阅读率很可能低于5%的事实。换句话说，14亿的5%，就是7000万读书人口了，你觉得中国的读书人口能有7000万吗？</p><p>这件事上所反应出来的东西与如今几乎已无人翻墙的本质是一模一样的。如今，需要翻墙的网站是如此之多，翻墙工具是如此脆弱，国内各功能各用处的网站和App是如此之全，在这样的情况下，翻墙还对多少人是一件“必要”的事情？当你一次又一次的连接VPN还没搜完两个关键词VPN又自动断线时，你会不会就那样屈从于百度，并从此忘记了翻墙这件事？</p><p>当真正常态化的翻墙已经几乎非付费而不行时，当每个月为翻墙所做的付费越来越高时，当付费的翻墙工具一个又一个的沦陷时，当人们和我谈起翻墙这件事，我还能乐观吗？</p><p>而且别忘了，当我讨论这些问题的时候，我的讨论范围仅仅局限于那些尚存一丝“想”翻墙愿望的人，而这群人在总人口中又占多少呢，这一比例，难道不又比愿意读书的人低的多吗？</p><p>每当我这样谈论起翻墙时，除了几天上那么几分钟的免费VPN党，就是一些高技术高门槛高平台的不以为然党，这帮人的论调，比免费VPN党更加荒唐。在他们眼里，只要学会了技术就没有这些问题了，只要进了名校／出了国／进了世界五百强或中国五百强就没有这些问题了。也许他们真的觉得站在那个高处是一件再正常不过的事情，可放言整个中华大地，又有几个人能有机会站在那样的高处？</p><p>还有一些人，每当我谈论翻墙时就会跟我解释，翻墙是政策需要，是迫不得已，翻墙有很多复杂的目的，譬如是为了提高某些信息的获取门槛……说实话，早几年，我也相信过类似的说法，理解过我党我国的某些也许存在的苦心。毕竟我们这些斯德哥尔摩症候患者们，总会有那么一些不切实际的幻想。可这么多年看过来，这些幻想我早就全都没有了，原因在于，它们没有一个站得住脚。</p><p>中国大陆地区限制访问的网站，已经远远超出了任何政策和法规限制的管理范畴，几乎任何一个境外网站哪怕只有一次表达了哪怕一丁点不合某类人眼的文字或图片，就会被无情的直接抹去，永无恢复之日，甚至大学资料库和艺术类网站也无法幸免于难。随着时间逐渐流去，我甚至已经丧失掉了最先很多网站被封时内心的那种诧异，因为我知道，即使想破脑袋也想不出来禁止访问原因的网站，一样会源源不断的列入GFW的无法访问名单。</p><p>而这一切的发生，究竟原因何在呢？我们不知道原因，因为从来没有任何人凭借任何理论来向我们我们解释为什么会发生这些事情。我们所能听到的倒是一些类似于“XX属于中国内政，别国无权干涉”“中国依据相关法律法规管理互联网违法行为”“中国的互联网世界最自由”等的官方辞令。更为让人百思不得其解的是，都这么多年过去了，这么多东西被夺走了，这么多片地方一块又一块的沦陷了，而我们中的任何一个人都仍然不知道是什么部门的什么人在以什么样的居心背着我们所有人替我们做出了这些“最终决定”。</p><p>翻墙工具呢？翻墙工具一个又一个的被追杀。最近两三年，我用的翻墙工具甚至几乎没人知道，而他们的用户量也无一例外少得可怜。使用它们都需要付费，付费是最有效的门槛，足以把相当多数人挡在门外，也足以“确保”用户的始终有限。可这几年来，这样的翻墙工具一个又一个的被端掉，而他们被端掉以后，甚至在网上掀不起什么涟漪。不是因为用过它们的人都没有感情，而是因为大家都不知道有过它们。</p><p>当这些年这些事情一而再再而三的发生的时候，我内心已不再有任何幻想，因为我知道，幻想都来源于不了解，现在网上很多的论调，曾经的我几乎都有过，而且我的态度我的言辞，比他们还要激烈的多。可随着越长越大，知道的越来越多，我实际是很幸运的把很多问题都想得越来越清楚了。然而这种幸运并不是人人都有的，也不是人人都认为它是一种幸运，每当把一个问题想的更清楚，我就更确切的感觉到，在很多问题上拒绝人云亦云，叛逆偏激或者被洗脑，是一件有些孤独的事情。</p><p>如果在过去时光的某一个瞬间，我因为阴差阳错而错过了那个促使我去不断研究翻墙新办法的理由，我会如何呢？我不愿去设想这样一种可能，因为这种可能的答案实在太过清晰，我身边到处都是答案。确实，我没有出身优越，也没有天赋异禀，我从小到大并未足够努力，使得我在某个年纪突然幡然醒悟之后开始努力之后，却仍然不能快速脱离我所处的境况。可事实也是，因为运气和许许多多原因导致意识不到这些事情的人，远比我之上意识的到这些事情的人多，而且多的多。</p><p>早些年，我是一个“忧国忧民”的人——这就叫年轻。等过了一个年纪，我脑袋里早已不会常常有这些没有必要的想法。可每当我一次又一次不断面对这样的问题时我不免又想，这样的状况，会持续多少年呢，难道会永远持续下去吗？难道中国人真的自信自己的14亿人能够对抗剩下将近60亿人的智慧吗？不，我不认为是这样的，我相信终归有一天，今天发生的这些事情都会改变，世界各个地方的人会分享智慧、知识、观点和创造，而不是像现在这样，我要和他们产生交流都是那么的困难。可是，当那一天到来的时候，今天这一代从这样的环境里长大出来的人又该如何面对呢？</p><p>这个国家，愿意将这个炸弹一般的问题埋下，等到十几年或几十年后再去解决吗？</p><p>转载自：<a href="https://commondatastorage.googleapis.com/letscorp_archive/archives/93192" target="_blank" rel="noopener">https://commondatastorage.googleapis.com/letscorp_archive/archives/93192</a></p>]]></content>
    
    <summary type="html">
    
      这个国家，愿意将这个炸弹一般的问题埋下，等到十几年或几十年后再去解决吗？
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="翻墙" scheme="http://hust.life/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>唐诗摘抄</title>
    <link href="http://hust.life/2018/01/04/life-2017-12-30-ancient-poetry/"/>
    <id>http://hust.life/2018/01/04/life-2017-12-30-ancient-poetry/</id>
    <published>2018-01-04T05:00:00.000Z</published>
    <updated>2018-01-05T15:46:56.629Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>山行留客<br>张旭<br>山光物态弄春晖，莫为轻阴便拟归。<br>纵使阴晴无雨色，入云深处亦沾衣。</p><p>寄全椒山中道士<br>韦应物<br>今朝郡斋冷，忽念山中客。<br>涧底束荆薪，归来煮白石。<br>欲持一瓢酒，远慰风雨夕。<br>落叶满山空，何处寻行迹？</p><p>题都城南庄<br>崔护<br>去年今日此门中，人面桃花相映红。<br>人面只今何处去，桃花依旧笑春风。</p></blockquote>]]></content>
    
    <summary type="html">
    
      摘抄几首葛兆光《唐诗选注》里面的唐诗
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="古诗" scheme="http://hust.life/tags/%E5%8F%A4%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习-基本关键词</title>
    <link href="http://hust.life/2018/01/02/tech-2018-01-02-sql-learn/"/>
    <id>http://hust.life/2018/01/02/tech-2018-01-02-sql-learn/</id>
    <published>2018-01-02T12:00:00.000Z</published>
    <updated>2018-01-02T15:46:55.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SQL-SELECT语句"><a href="#SQL-SELECT语句" class="headerlink" title="SQL SELECT语句"></a>SQL SELECT语句</h3><p> SELECT语句用于从表中选取数据</p><h4 id="SQL-SELECT语法"><a href="#SQL-SELECT语法" class="headerlink" title="SQL SELECT语法"></a>SQL SELECT语法</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure><p>以及：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure></p><div class="note info"><p>注意：SQL语句对大小写不敏感。SELECT等效成slect</p></div><h4 id="SQL-SELECT实例"><a href="#SQL-SELECT实例" class="headerlink" title="SQL SELECT实例"></a>SQL SELECT实例</h4><p>如需获取名为<code>LastName</code>和<code>FirstName</code>的列的内容（从<code>Person</code>数据库），请使用类似这样的<code>SELECT</code>语句：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName,FirstName <span class="keyword">From</span> Persons</span><br></pre></td></tr></table></figure></p><p><strong>Person Table</strong></p><table><thead><tr><th>Id</th><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>1</td><td>Adams</td><td>John</td><td>Oxford Street</td><td>London</td></tr><tr><td>2</td><td>Bush</td><td>George</td><td>Fifth Avenue</td><td>New York</td></tr><tr><td>3</td><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr></tbody></table><p>结果：</p><table><thead><tr><th>LastName</th><th>FirstName</th></tr></thead><tbody><tr><td>Adams</td><td>John</td></tr><tr><td>Bush</td><td>George</td></tr><tr><td>Carter</td><td>Thomas</td></tr></tbody></table><h3 id="SQL-distinct语句"><a href="#SQL-distinct语句" class="headerlink" title="SQL distinct语句"></a>SQL distinct语句</h3><blockquote><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。<br>关键词 DISTINCT 用于返回唯一不同的值。</p></blockquote><p>语法：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure></p><h4 id="使用DISTINCT关键词"><a href="#使用DISTINCT关键词" class="headerlink" title="使用DISTINCT关键词"></a>使用DISTINCT关键词</h4><p><strong>Order表：</strong></p><table><thead><tr><th>Company</th><th>OrderNumber</th></tr></thead><tbody><tr><td>IBM</td><td>3532</td></tr><tr><td>W3School</td><td>2356</td></tr><tr><td>Apple</td><td>4698</td></tr><tr><td>W3School</td><td>6953</td></tr></tbody></table><blockquote><p>如需从 “Company” 列中仅选取唯一不同的值，我们需要使用 SELECT DISTINCT 语句：</p></blockquote><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Company <span class="keyword">FROM</span> Orders</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><table><thead><tr><th>Company</th></tr></thead><tbody><tr><td>IBM</td></tr><tr><td>W3School</td></tr><tr><td>Apple</td></tr><tr><td>W3School</td></tr></tbody></table><div class="note info"><p>现在，在结果集中，”W3School” 仅被列出了一次。</p></div><h3 id="SQL-WHERE语句"><a href="#SQL-WHERE语句" class="headerlink" title="SQL WHERE语句"></a>SQL WHERE语句</h3><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。</p><p>语法：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</span><br></pre></td></tr></table></figure></p><p><strong>下面运算符可以在<code>WHERE</code>使用：</strong></p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr></tbody></table><h4 id="使用-WHERE-子句"><a href="#使用-WHERE-子句" class="headerlink" title="使用 WHERE 子句"></a>使用 WHERE 子句</h4><p>如果只希望选取居住在城市 “Beijing” 中的人，我们需要向 SELECT 语句添加 WHERE 子句：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City = <span class="string">'Beijing'</span></span><br></pre></td></tr></table></figure></p><p><strong>“Person”表</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Adams</td><td>John</td><td>Oxford Street</td><td>London</td><td>1970</td></tr><tr><td>Bush</td><td>George</td><td>Fifth Avenue</td><td>New York</td><td>1975</td></tr><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td><td>1985</td></tr></tbody></table><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td><td>1985</td></tr></tbody></table><div class="note warning"><p>引号的使用<br>请注意，我们在例子中的条件值周围使用的是单引号。<br>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。</p></div><p>文本值：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--<span class="keyword">True</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName = <span class="string">'Bush'</span></span><br><span class="line">--<span class="keyword">False</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=Bush</span><br></pre></td></tr></table></figure><p>数值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--True</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="number">1965</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--False</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="string">'1965'</span></span><br></pre></td></tr></table></figure><h3 id="SQL-AND-amp-OR-运算符"><a href="#SQL-AND-amp-OR-运算符" class="headerlink" title="SQL AND &amp; OR 运算符"></a>SQL AND &amp; OR 运算符</h3><p>AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。</p><table><thead><tr><th>AND 和 OR 运算符功能</th></tr></thead><tbody><tr><td>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来</td></tr><tr><td>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录</td></tr><tr><td>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录</td></tr></tbody></table><h4 id="使用AND运算符"><a href="#使用AND运算符" class="headerlink" title="使用AND运算符"></a>使用AND运算符</h4><p>使用 AND 来显示所有姓为 “Carter” 并且名为 “Thomas” 的人：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirestName = <span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName = <span class="string">'Carter'</span></span><br></pre></td></tr></table></figure></p><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr></tbody></table><h4 id="使用OR运算符"><a href="#使用OR运算符" class="headerlink" title="使用OR运算符"></a>使用OR运算符</h4><p>使用 OR 来显示所有姓为 “Carter” 或者名为 “Thomas” 的人：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname = <span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname = <span class="string">'Adams'</span></span><br></pre></td></tr></table></figure></p><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Adams</td><td>John</td><td>Oxford Street</td><td>London</td><td>1970</td></tr><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr></tbody></table><h4 id="结合AND和OR运算符"><a href="#结合AND和OR运算符" class="headerlink" title="结合AND和OR运算符"></a>结合AND和OR运算符</h4><p>我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> (FirstName = <span class="string">'Thomas'</span> <span class="keyword">OR</span> Firstname = <span class="string">'George'</span>)</span><br><span class="line"><span class="keyword">AND</span> LastName = <span class="string">'Carter'</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr></tbody></table><h3 id="SQL-ORDER-BY-子句"><a href="#SQL-ORDER-BY-子句" class="headerlink" title="SQL ORDER BY 子句"></a>SQL ORDER BY 子句</h3><p>ORDER BY 语句用于对结果集进行排序。</p><table><thead><tr><th>ORDER BY 语句功能</th></tr></thead><tbody><tr><td>ORDER BY 语句用于根据指定的列对结果集进行排序</td></tr><tr><td>ORDER BY 语句默认按照升序对记录进行排序</td></tr><tr><td>如果您希望按照降序对记录进行排序，可以使用 DESC 关键字</td></tr></tbody></table><h4 id="使用ORDER-BY运算符"><a href="#使用ORDER-BY运算符" class="headerlink" title="使用ORDER BY运算符"></a>使用ORDER BY运算符</h4><h5 id="以字母顺序"><a href="#以字母顺序" class="headerlink" title="以字母顺序"></a>以字母顺序</h5><p>顺字母顺序：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Company,<span class="keyword">OrderNumber </span>FROM <span class="keyword">Orders </span><span class="keyword">ORDER </span><span class="keyword">BY </span>Company</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>Company</th><th>OrderNumber</th></tr></thead><tbody><tr><td>Apple</td><td>4698</td></tr><tr><td>IBM</td><td>3532</td></tr><tr><td>W3School</td><td>6953</td></tr><tr><td>W3School</td><td>2356</td></tr></tbody></table><p>逆字母顺序：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Company,OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h5 id="以数字顺序"><a href="#以数字顺序" class="headerlink" title="以数字顺序"></a>以数字顺序</h5><table><thead><tr><th>Company</th><th>OrderNumber</th></tr></thead><tbody><tr><td>W3School</td><td>2356</td></tr><tr><td>IBM</td><td>3532</td></tr><tr><td>Apple</td><td>4698</td></tr><tr><td>W3School</td><td>6953</td></tr></tbody></table><p>以逆字母顺序显示公司名称，并以数字顺序显示顺序号：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure></p><div class="note info"><p>mysql可以根据字段进行排序<br>其中，DESC表示降序，ASC表示升序；<br>order by 字段名  DESC;按照字段名降序排序；<br>order by 字段名 ASC;按照字段名升序排序。</p></div><h3 id="SQL-INSERT-INTO-语句"><a href="#SQL-INSERT-INTO-语句" class="headerlink" title="SQL INSERT INTO 语句"></a>SQL INSERT INTO 语句</h3><p>INSERT INTO 语句用于向表格中插入新的行。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><h5 id="插入某列某行"><a href="#插入某列某行" class="headerlink" title="插入某列某行"></a>插入某列某行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name(列1，列2，...)VALUES (值1，值2，...)</span><br></pre></td></tr></table></figure><p><strong>实例</strong><br>Test表：</p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Test</span> <span class="keyword">VALUES</span>(<span class="string">'Gates'</span>,<span class="string">'Bill'</span>,<span class="string">'hust'</span>,<span class="string">'Wuhan'</span>)</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr><tr><td>Gates</td><td>Bill</td><td>hust</td><td>wuhan</td><td>1980</td></tr></tbody></table><h5 id="插入新的行"><a href="#插入新的行" class="headerlink" title="插入新的行"></a>插入新的行</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名称 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Persons (LastName, Address) VALUES (<span class="string">'Wilson'</span>, <span class="string">'Champs-Elysees'</span>)</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr><tr><td>Wilson</td><td></td><td></td><td>Champs-Elysees</td></tr></tbody></table><h3 id="Update语句"><a href="#Update语句" class="headerlink" title="Update语句"></a>Update语句</h3><p>Update 语句用于修改表中的数据。</p><p>语句：<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 = 新值 <span class="keyword">WHERE</span> 列名称 = 某值</span><br></pre></td></tr></table></figure></p><h4 id="更新某一行中的一个列"><a href="#更新某一行中的一个列" class="headerlink" title="更新某一行中的一个列"></a>更新某一行中的一个列</h4><p>Person：</p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr><tr><td>Gates</td><td>Bill</td><td>hust</td><td>wuhan</td><td>1980</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> FirstName = <span class="string">'Fred'</span> <span class="keyword">WHERE</span> LastName = <span class="string">'Bill'</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td><td>1980</td></tr><tr><td>Gates</td><td>Fred</td><td>hust</td><td>wuhan</td><td>1980</td></tr></tbody></table><h4 id="更新某一行中的若干个列"><a href="#更新某一行中的若干个列" class="headerlink" title="更新某一行中的若干个列"></a>更新某一行中的若干个列</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Person <span class="keyword">SET</span> Address <span class="comment">=</span> <span class="comment">'Wuhan University'</span><span class="comment">,City =</span> <span class="comment">'Wuhan'</span></span><br><span class="line">WHERE <span class="comment">LastName =</span> <span class="comment">'Carter'</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Wuhan University</td><td>Wuhan</td><td>1980</td></tr><tr><td>Gates</td><td>Fred</td><td>hust</td><td>wuhan</td><td>1980</td></tr></tbody></table><h3 id="SQL-DELETE语句"><a href="#SQL-DELETE语句" class="headerlink" title="SQL DELETE语句"></a>SQL DELETE语句</h3><p>DELETE 语句用于删除表中的行。</p><p>语法<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 = 值</span><br></pre></td></tr></table></figure></p><h4 id="删除某行"><a href="#删除某行" class="headerlink" title="删除某行"></a>删除某行</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'Gates'</span></span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th><th>Year</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Wuhan University</td><td>Wuhan</td><td>1980</td></tr></tbody></table><h4 id="删除所有行"><a href="#删除所有行" class="headerlink" title="删除所有行"></a>删除所有行</h4><p>可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      W3School教程中罗列的SQL基本关键词含义以及用法
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SQL" scheme="http://hust.life/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>观《芳华》有感</title>
    <link href="http://hust.life/2017/12/30/life-2017-12-30-fanghua/"/>
    <id>http://hust.life/2017/12/30/life-2017-12-30-fanghua/</id>
    <published>2017-12-30T15:00:00.000Z</published>
    <updated>2018-01-04T04:45:18.766Z</updated>
    
    <content type="html"><![CDATA[<p>这是一部由严歌苓同名小说改编的电影。主线剧情男主角刘峰和女主角何小萍在文革中期一直到改革开放十年后的情感故事，其中还有穿插着穗子对陈灿的情感故事以及那些军属文工团的悲欢离合。<br>何小萍，是一个感情细腻，十分敏感的姑娘。爱她的父亲离她而去（文革），继父不接受她，在新家庭感受不到任何关爱。影片中重复了两句话，让人不由对何小萍的身世感到同情：“她以为脱离了她原来那个家庭，就没有人会欺负她了”。现实又是何其残酷。<br>一开始先是因为偷偷用舍友丁丁的军装去照相馆拍照，而被全宿舍女成员认为是“说谎精”；后面还因为那个衬衣的胸垫被污蔑，甚至“小芭蕾”还要进一步羞辱她。还有一个男伴始终不肯跳舞时抱她，嫌她有汗馊味，还当众说出来，侮辱了她。在这些人中，只有男主角刘峰始终帮助她，愿意和她成为舞伴。最后刘峰被下放连队，也只有何小萍送了他。作为一个学雷锋标兵，这样的结果真的让人寒心。<br>这部电影有两个泪点，一个是对越自卫反击战里面，真实地刻画了战争的残酷、血腥的一面，镜头扫过那些残肢断臂的伤病员，我内心真的深深的被震撼了，战争太残酷了。男主角作为副连长护送弹药被越军伏击，伤亡16，重伤5，剩余16。刘峰大动脉被打断，看着一个个之前谈笑风生战友死在面前，血肉横飞，主角内心受到的冲击可想而知，再铁血的汉子也失控痛哭。<br>第二个是受到战争刺激和成为战斗英雄巨大反差的刺激下而精神失常的何小萍在听文工团最后一次演出后，在音乐下不由自主地翩翩起舞。<br>但是在豆瓣上，貌似评分给得低的地方，就是这两处……我打算去图书馆借来原著再下评论。<br>最后结局，虽然历经磨难，刘峰和何小萍相依为命，一起度过晚年了。<br>说实话，看了这部电影，刘峰让我想起了余华《兄弟》里面的宋钢，都是上个世纪六七十年代的模范式人物，温文儒雅、乐于助人、安于现状、为人老实。但是很可悲，改革开放后，他们都一下子被淘汰、被抛弃。冯小刚的电影和余华的小说，都能深刻地揭示社会的扭曲荒诞之处，这正是吸引我的地方。</p><p><img src="http://p0xt50lze.bkt.clouddn.com/YiUPYl9dgX2Oj%253DXFd6xpXtGp6zq1ZteOCnC%253DNBEKnnbh71503379198116transferflag.png" alt="此处输入图片的描述"></p>]]></content>
    
    <summary type="html">
    
      元旦和两个在武汉上大学的妹妹去西园看了冯小刚的电影《芳华》
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="电影" scheme="http://hust.life/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>全力复习考试</title>
    <link href="http://hust.life/2017/12/27/life-2017-12-26-12month-Sentiment2/"/>
    <id>http://hust.life/2017/12/27/life-2017-12-26-12month-Sentiment2/</id>
    <published>2017-12-27T04:00:00.000Z</published>
    <updated>2017-12-27T04:20:44.713Z</updated>
    
    <content type="html"><![CDATA[<p>不搞课设了，这个大腿抱稳了。<br>做事情还是要有先后之分，加权才是最重要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不搞课设了，这个大腿抱稳了。&lt;br&gt;做事情还是要有先后之分，加权才是最重要的。&lt;/p&gt;

      
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>别叫醒一个装睡的人</title>
    <link href="http://hust.life/2017/12/26/life-2017-12-26-12month-Sentiment/"/>
    <id>http://hust.life/2017/12/26/life-2017-12-26-12month-Sentiment/</id>
    <published>2017-12-26T08:00:00.000Z</published>
    <updated>2017-12-27T04:19:09.783Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到考研群里面热闹非凡，和高考一样，总是有人欢喜有人忧。<br>我认识的几个学长，其中一人，报考的学校和我想报考的是一样的。他从3月开始复习，在考研前，选择放弃。<br>意料之外，情理之中。但我没想到，他居然真的放弃了。虽然和他相处时间也算比较长了，对他的性格也比较了解，但这位学长的放弃也深深地刺激了我。让我再次坚定了信念：大三专心学习，不再参加任何比赛的决定是正确的。</p><blockquote><p>“你为什么放弃了考研？”<br>“保研没保上是我不刷加权，工作拒了是嫌硬件没前途，考研是我没考。我做的事比这三者有意思多了”</p></blockquote><a id="more"></a><p>其实，我心里明白，这不是他第一次选择在即将要达成目标的时候放弃。<br>他和我说，当年Dian团队的通宵测试时，题目写一大半了，电脑坏了，自动关机，他啥都没有管，直接走了。<br>16年省赛，培训了一个暑假，结果最后关头弃赛，就因为队友不合。<br>我们中很多人，做事情关于结果大于过程，做什么事情，一定要觉得能达到的结果足够有价值才会坚持，这是人之常情，但是这其实是一种对比，有关结果的对比。一旦产生对比，就会产生人性深处的竞争。<strong>是竞争就会有输赢，有输赢就会有压力，有压力就会有逃避。这就是放弃的根本原因所在。</strong><br>那些可以坚持的人并不是不怕输，而是他们懂得走好自己的路，多和自己比较，心态比较好。活在当下比期望未来更让人感到力量，而这种内在的力量是巨大的，所以促进自我成长的心态，要比攀比他人更容易积极地坚持下去。这也是为什么为自己活的人，更加容易做出成绩。人生路漫漫，只有脚踏实地才能仰望星空。</p><p>另一方面，逃避现实并不能解决任何问题。<br>总有些人，爱把责任推脱到命运、人品、环境之类的外界因素上，或者义无反顾地对自己洗脑，相信这一切的不顺都是自己喜好的选择罢了，以此来掩盖自己因为懒惰、穷忙、没有自制力、执行力而导致的严重后果。<br>所以，永远不要试图去开导这类人，给他们灌输鸡汤。你愈发安慰他们，他们便愈加争辩，反复证明自己的无辜。<br>“你永远无法叫醒一个装睡的人”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看到考研群里面热闹非凡，和高考一样，总是有人欢喜有人忧。&lt;br&gt;我认识的几个学长，其中一人，报考的学校和我想报考的是一样的。他从3月开始复习，在考研前，选择放弃。&lt;br&gt;意料之外，情理之中。但我没想到，他居然真的放弃了。虽然和他相处时间也算比较长了，对他的性格也比较了解，但这位学长的放弃也深深地刺激了我。让我再次坚定了信念：大三专心学习，不再参加任何比赛的决定是正确的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“你为什么放弃了考研？”&lt;br&gt;“保研没保上是我不刷加权，工作拒了是嫌硬件没前途，考研是我没考。我做的事比这三者有意思多了”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-电子邮件编程</title>
    <link href="http://hust.life/2017/12/25/tech-2017-12-21-python-e-mail/"/>
    <id>http://hust.life/2017/12/25/tech-2017-12-21-python-e-mail/</id>
    <published>2017-12-25T15:00:00.000Z</published>
    <updated>2017-12-26T15:46:36.967Z</updated>
    
    <content type="html"><![CDATA[<p>SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。<br>Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。<br><a id="more"></a></p><h3 id="SMTP发送邮件"><a href="#SMTP发送邮件" class="headerlink" title="SMTP发送邮件"></a>SMTP发送邮件</h3><h4 id="构造一个最简单的纯文本邮件"><a href="#构造一个最简单的纯文本邮件" class="headerlink" title="构造一个最简单的纯文本邮件"></a>构造一个最简单的纯文本邮件</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from email.mime.text import MIMEText</span><br><span class="line">msg = MIMEText(<span class="string">'hello,send by Python...'</span>,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">#plain纯文本,utf-8编码保证语言兼容性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#通过SMTP发出去</span></span><br><span class="line">from_addr = input(<span class="string">'From:'</span>)</span><br><span class="line">password = input(<span class="string">'Password:'</span>)</span><br><span class="line"><span class="meta">#输入收件人地址</span></span><br><span class="line">to_addr = input(<span class="string">'To:'</span>)</span><br><span class="line"><span class="meta">#输入SMTP服务器地址</span></span><br><span class="line">smtp_server = input(<span class="string">'SMTP server:'</span>)</span><br><span class="line"></span><br><span class="line">import smtplib</span><br><span class="line"><span class="keyword">server</span> = smtplib.SMTP(smtp_server,<span class="number">25</span>)<span class="meta">#SMTP默认端口25</span></span><br><span class="line"><span class="keyword">server</span>.set_debuglevel(<span class="number">1</span>)<span class="meta">#用set_debuglevel(1)就可以打印出和SMTP服务器交互的所有信息</span></span><br><span class="line"><span class="keyword">server</span>.login(from_addr,password)</span><br><span class="line"><span class="keyword">server</span>.sendmail(from_addr,[to_addr],msg.as_string())</span><br><span class="line"><span class="keyword">server</span>.quit()</span><br></pre></td></tr></table></figure><div class="note info"><p>我们编写了一个函数_format_addr()来格式化一个邮件地址。注意不能简单地传入name <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x61;&#100;&#100;&#114;&#64;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#x61;&#100;&#100;&#114;&#64;&#101;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;</a>，因为如果包含中文，需要通过Header对象进行编码。</p></div><p>msg[‘To’]接收的是字符串而不是list，如果有多个邮件地址，用,分隔即可</p><h4 id="发送附件"><a href="#发送附件" class="headerlink" title="发送附件"></a>发送附件</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr, formataddr</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line">def _format_addr(s):</span><br><span class="line">    name, addr = parseaddr(s)</span><br><span class="line">    return formataddr((Header(name, <span class="string">'utf-8'</span>).encode(), addr))</span><br><span class="line"></span><br><span class="line">from_addr = <span class="string">'fangzr@hust.edu.cn'</span>#input(<span class="string">'From: '</span>)</span><br><span class="line">password = <span class="string">'xxx'</span>#input(<span class="string">'Password: '</span>)</span><br><span class="line">to_addr = <span class="string">'393756200@qq.com'</span>#input(<span class="string">'To: '</span>)</span><br><span class="line">smtp_server = <span class="string">'mail.hust.edu.cn'</span>#input(<span class="string">'SMTP server: '</span>)</span><br><span class="line"></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[<span class="string">'From'</span>] = _format_addr(<span class="string">'Python爱好者 &lt;%s&gt;'</span> % from_addr)</span><br><span class="line">msg[<span class="string">'To'</span>] = _format_addr(<span class="string">'管理员 &lt;%s&gt;'</span> % to_addr)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">'来自SMTP的问候……'</span>, <span class="string">'utf-8'</span>).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#添加附件就是加上一个MIMEBase，从本地读取一个照片</span><br><span class="line">mine = MIMEApplication(open(<span class="string">'C:/Users/Peter/Desktop/test.jpg'</span>,<span class="string">'rb'</span>).read())</span><br><span class="line">    #设置附件的MIME和文件名，这里是png类型</span><br><span class="line">mine.add_header(<span class="string">'Content-Disposition'</span>,<span class="string">'attachment'</span>,filename=<span class="string">'test.jpg'</span>)</span><br><span class="line">msg.attach(mine)</span><br><span class="line">#邮件正文</span><br><span class="line">msg.attach(MIMEText(<span class="string">'&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;'</span> +</span><br><span class="line">    <span class="string">'&lt;p&gt;&lt;img src="cid:0"&gt;&lt;/p&gt;'</span> +</span><br><span class="line">    <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>, <span class="string">'html'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line">server = smtplib.SMTP(smtp_server, <span class="number">25</span>)</span><br><span class="line">server.set_debuglevel(<span class="number">1</span>)</span><br><span class="line">server.login(from_addr, password)</span><br><span class="line">server.sendmail(from_addr, [to_addr], msg.as_string())</span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure><h3 id="接收邮件"><a href="#接收邮件" class="headerlink" title="接收邮件"></a>接收邮件</h3><blockquote><p>收取邮件就是编写一个MUA作为客户端，从MDA把邮件获取到用户的电脑或者手机上。收取邮件最常用的协议是POP协议，目前版本号是3，俗称POP3。<br>Python内置一个<code>poplib</code>模块，实现了<code>POP3</code>协议，可以直接用来收邮件。<br>要把POP3收取的文本变成可以阅读的邮件，还需要用email模块提供的各种类来解析原始文本，变成可阅读的邮件对象。</p></blockquote><p>第一步：用poplib把邮件的原始文本下载到本地；</p><p>第二部：用email解析原始文本，还原为邮件对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.parser <span class="keyword">import</span> Parser</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> decode_header</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parseaddr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> poplib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入邮件地址, 口令和POP3服务器地址:</span></span><br><span class="line">email = <span class="string">'fangzr@hust.edu.cn'</span></span><br><span class="line">password = <span class="string">'xxx'</span></span><br><span class="line">pop3_server = <span class="string">'mail.hust.edu.cn'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_charset</span><span class="params">(msg)</span>:</span></span><br><span class="line">    charset = msg.get_charset()</span><br><span class="line">    <span class="keyword">if</span> charset <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        content_type = msg.get(<span class="string">'Content-Type'</span>, <span class="string">''</span>).lower()</span><br><span class="line">        pos = content_type.find(<span class="string">'charset='</span>)</span><br><span class="line">        <span class="keyword">if</span> pos &gt;= <span class="number">0</span>:</span><br><span class="line">            charset = content_type[pos + <span class="number">8</span>:].strip()</span><br><span class="line">    <span class="keyword">return</span> charset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_str</span><span class="params">(s)</span>:</span></span><br><span class="line">    value, charset = decode_header(s)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> charset:</span><br><span class="line">        value = value.decode(charset)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_info</span><span class="params">(msg, indent=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> indent == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> header <span class="keyword">in</span> [<span class="string">'From'</span>, <span class="string">'To'</span>, <span class="string">'Subject'</span>]:</span><br><span class="line">            value = msg.get(header, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> value:</span><br><span class="line">                <span class="keyword">if</span> header==<span class="string">'Subject'</span>:</span><br><span class="line">                    value = decode_str(value)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    hdr, addr = parseaddr(value)</span><br><span class="line">                    name = decode_str(hdr)</span><br><span class="line">                    value = <span class="string">u'%s &lt;%s&gt;'</span> % (name, addr)</span><br><span class="line">            print(<span class="string">'%s%s: %s'</span> % (<span class="string">'  '</span> * indent, header, value))</span><br><span class="line">    <span class="keyword">if</span> (msg.is_multipart()):</span><br><span class="line">        parts = msg.get_payload()</span><br><span class="line">        <span class="keyword">for</span> n, part <span class="keyword">in</span> enumerate(parts):</span><br><span class="line">            print(<span class="string">'%spart %s'</span> % (<span class="string">'  '</span> * indent, n))</span><br><span class="line">            print(<span class="string">'%s--------------------'</span> % (<span class="string">'  '</span> * indent))</span><br><span class="line">            print_info(part, indent + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content_type = msg.get_content_type()</span><br><span class="line">        <span class="keyword">if</span> content_type==<span class="string">'text/plain'</span> <span class="keyword">or</span> content_type==<span class="string">'text/html'</span>:</span><br><span class="line">            content = msg.get_payload(decode=<span class="keyword">True</span>)</span><br><span class="line">            charset = guess_charset(msg)</span><br><span class="line">            <span class="keyword">if</span> charset:</span><br><span class="line">                content = content.decode(charset)</span><br><span class="line">            print(<span class="string">'%sText: %s'</span> % (<span class="string">'  '</span> * indent, content + <span class="string">'...'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%sAttachment: %s'</span> % (<span class="string">'  '</span> * indent, content_type))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到POP3服务器:</span></span><br><span class="line">server = poplib.POP3(pop3_server)</span><br><span class="line"><span class="comment"># 可以打开或关闭调试信息:</span></span><br><span class="line">server.set_debuglevel(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 可选:打印POP3服务器的欢迎文字:</span></span><br><span class="line">print(server.getwelcome().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># 身份认证:</span></span><br><span class="line">server.user(email)</span><br><span class="line">server.pass_(password)</span><br><span class="line"><span class="comment"># stat()返回邮件数量和占用空间:</span></span><br><span class="line">print(<span class="string">'Messages: %s. Size: %s'</span> % server.stat())</span><br><span class="line"><span class="comment"># list()返回所有邮件的编号:</span></span><br><span class="line">resp, mails, octets = server.list()</span><br><span class="line"><span class="comment"># 可以查看返回的列表类似[b'1 82923', b'2 2184', ...]</span></span><br><span class="line">print(mails)</span><br><span class="line"><span class="comment"># 获取最新一封邮件, 注意索引号从1开始:</span></span><br><span class="line"></span><br><span class="line">index = len(mails[<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">resp, lines, octets = server.retr(index)</span><br><span class="line"><span class="comment"># lines存储了邮件的原始文本的每一行,</span></span><br><span class="line"><span class="comment"># 可以获得整个邮件的原始文本:</span></span><br><span class="line">msg_content = <span class="string">b'\r\n'</span>.join(lines).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 稍后解析出邮件:</span></span><br><span class="line">msg = Parser().parsestr(msg_content)</span><br><span class="line">print_info(msg)</span><br><span class="line"><span class="comment"># 可以根据邮件索引号直接从服务器删除邮件:</span></span><br><span class="line"><span class="comment"># server.dele(index)</span></span><br><span class="line"><span class="comment"># 关闭连接:</span></span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。&lt;br&gt;Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next主题Tag使用方法</title>
    <link href="http://hust.life/2017/12/25/tech-2017-12-22-hexo-next-config/"/>
    <id>http://hust.life/2017/12/25/tech-2017-12-22-hexo-next-config/</id>
    <published>2017-12-25T13:00:00.000Z</published>
    <updated>2018-01-02T12:24:16.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自带样式-note-标签"><a href="#自带样式-note-标签" class="headerlink" title="自带样式 note 标签"></a>自带样式 note 标签</h3><h4 id="default样式"><a href="#default样式" class="headerlink" title="default样式"></a>default样式</h4><div class="note default"><p>default</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note default </span>%&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="primary样式"><a href="#primary样式" class="headerlink" title="primary样式"></a>primary样式</h4><div class="note primary"><p>primary</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>primary %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="success样式"><a href="#success样式" class="headerlink" title="success样式"></a>success样式</h4><div class="note success"><p>success</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>success %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="info样式"><a href="#info样式" class="headerlink" title="info样式"></a>info样式</h4><div class="note info"><p>info</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">info</span> %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="warning样式"><a href="#warning样式" class="headerlink" title="warning样式"></a>warning样式</h4><div class="note warning"><p>warning</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">warning</span> %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="danger样式"><a href="#danger样式" class="headerlink" title="danger样式"></a>danger样式</h4><div class="note danger"><p>danger</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Tag注意事项"><a href="#使用Tag注意事项" class="headerlink" title="使用Tag注意事项"></a>使用<code>Tag</code>注意事项</h4><div class="note danger"><p>一定要分行写<code>% note xxx %</code>和<code>% note danger %</code>，否则会出现<code>bug</code></p></div>]]></content>
    
    <summary type="html">
    
      总结我学习到的Next主题Tag使用方法，有效增强文章可读性
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://hust.life/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>十二月：反省</title>
    <link href="http://hust.life/2017/12/24/life-2017-12-24-12month-summary/"/>
    <id>http://hust.life/2017/12/24/life-2017-12-24-12month-summary/</id>
    <published>2017-12-23T16:20:00.000Z</published>
    <updated>2017-12-23T16:10:08.944Z</updated>
    
    <content type="html"><![CDATA[<p>今天在知乎上看到了一个问题，问“为什么有人在学习初段效率惊人，而在过了入门阶段之后兴趣与学习能力都迅速下降？”<br>这个问题的回答，一下让我明白自己长期效率低下、对学习意义迷茫的重要原因。<br>初中：学渣向学霸转型。<br>高中：保持学霸状态。<br>我放弃了一切，竭尽全力地追求每次考试的排名。<br>幸运的是，高考结果比平时最好成绩还要好很多。<br>然而，到了大学，我才真正明白这句话的含义：<br><strong>你以为的极限 只是别人的起点</strong><br><a id="more"></a><br>我先是被巨佬们一路碾压，大佬们不仅加权高，课外生活丰富，竞赛成绩优异，还早早地找到男（女）朋友。而我呢？保研无望，竞赛失利，独自一人自习2年……<br>相比较高中生活，真的差距好大。大到让我感觉到了自己努力的无力，我常常思索“既然别人都已经做得这么出色了，那我做还有什么意义呢？”<br>借<a href="https://mukosame.github.io/" target="_blank" rel="noopener">向小雨</a>的话：</p><blockquote><p>毕竟新环境里，没有一个人不比自己强，无论自己做什么，前头都有人挡着，而且常常那个人还把一切都挡严实了……以前的时候，我是万万受不住的，毕竟引导自己的价值观就是在一个同生群里，在线性的评估中占得鳌头。</p></blockquote><p>所以，我必须接受自己在某一方面的不足，到了大学，基本不可能像高中一样以排名成绩的虚荣感支撑自己努力。为了获得这种虚荣感，我也可能做出不理智的选择，比如花很多时间在竞赛上面，总是想做一些让别人佩服的事情。我要改变自己的生活态度。<strong>而改变这种浮躁的态度关键，就是安下心，踏踏实实的学习。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.放弃那些虚荣的做法吧，学习不是为了给别人看。安下心，踏踏实实的学习。<br>2.专心于课内知识学习和<code>Python</code>学习，要有耐心，要能耐得住寂寞，要有长期的计划，不要急于把自己的成果展现出来。（博客怕也是虚荣的表现= =）<br>3.我不是天才，我是凡人。正视缺点，踏实前进。<br>4.放低不合理期望，合理规划时间。长期努力而不是短期拼命。<br>5.so，对于精力的管控很重要。以及，你并不像自己想象的那么爱玩。有时候你在玩，只是因为不知道该做什么而已；<br>6.综上，早睡早起好身体，考研是场马拉松，坚持到最后才是赢家。</p><h3 id="知乎回答："><a href="#知乎回答：" class="headerlink" title="知乎回答："></a>知乎回答：</h3><blockquote><p>怎么克服我也是这两三年才想明白的。 对于这个问题，更为准确的描述是这样的：<br>在学习某项知识或锻炼某项技能时，可以轻易的超过很多人，但是很难更进一步，最后总会被努力的人和真正的天才超越。<br>学习能力效率高的原因是，学习和思维能力强，加上专注力高。 至于为何不能更进一步，下面说话就比较狠，但是确实是这样的。<br>其实原因很简单，因为在需要更进一步的时候，肯定需要更为努力和钻研，然而前期的顺利和取得的赞美与成就，让我们无法忍耐这比较长时间的练习和积累期。<br>在刚学一个东西的时候，我们会很拼。练吉他的话，爬格子会爬一整天；写游戏的话，可能会连续熬几天一口气做完。因为我们很清楚我们的学习和工作的效率很高，只要花费这少量的时间，我们就可以获得别人的赞美。然而在看到了新的、更为广阔的世界的同时，我们会发现要在这个世界里让别人赞美，需要花费更多的精力和时间去前进，而这个时间还很长。<br>但我们这种人最无法忍受的就是，不能在很短时间内就可以取得让他人称赞的成绩。我们做很多事情，主要原因固然是因为自己喜欢。但还有一个或许会被自己刻意忽视的重要原因，那就是我们要做给别人看，告诉别人我们很厉害。这种太过在意他人看法的性格，叫做虚荣。这种虚荣让我们在学习和做事的时候过于功利。<br>那么问题来了，如何克服呢？其实也很简单。就是安下心，踏踏实实的学习。<br>题主你说要专精一门，这是对的。不过我还有一个看法，就是我们在专精一门的时候，未必要放弃技能树的其他内容。这是我们天生的优势。但是我们要注意的是，在专精这一门的时候，要有耐心，要能耐得住寂寞，要有长期的计划，不要急于把自己的成果展现出来。<br>要能正视自己的不足，一步步的去学习和练习。同时要告诉自己，我不是天才。<br>更新一点：要合理规划时间，短期的过分拼命会让自己在阶段性目标达成后，产生懈怠感。<br>作者：雨少主<br>链接：<a href="https://www.zhihu.com/question/26761055/answer/33929400" target="_blank" rel="noopener">https://www.zhihu.com/question/26761055/answer/33929400</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在知乎上看到了一个问题，问“为什么有人在学习初段效率惊人，而在过了入门阶段之后兴趣与学习能力都迅速下降？”&lt;br&gt;这个问题的回答，一下让我明白自己长期效率低下、对学习意义迷茫的重要原因。&lt;br&gt;初中：学渣向学霸转型。&lt;br&gt;高中：保持学霸状态。&lt;br&gt;我放弃了一切，竭尽全力地追求每次考试的排名。&lt;br&gt;幸运的是，高考结果比平时最好成绩还要好很多。&lt;br&gt;然而，到了大学，我才真正明白这句话的含义：&lt;br&gt;&lt;strong&gt;你以为的极限 只是别人的起点&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-正则表达式</title>
    <link href="http://hust.life/2017/12/23/tech-2017-12-21-python-regular-expression/"/>
    <id>http://hust.life/2017/12/23/tech-2017-12-21-python-regular-expression/</id>
    <published>2017-12-23T03:00:00.000Z</published>
    <updated>2017-12-25T12:50:25.410Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><a id="more"></a><h3 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h3><table><thead><tr><th>常用表达式</th><th>功能</th></tr></thead><tbody><tr><td>\d</td><td>一配一个数字</td></tr><tr><td>\w</td><td>匹配一个数字或字母</td></tr><tr><td>.</td><td>可以匹配任意字符</td></tr><tr><td>+</td><td>表示至少一个字符</td></tr><tr><td>？</td><td>表示0个或者1个字符</td></tr><tr><td>^</td><td>行开头，<code>^\d</code>表示必须数字开头</td></tr><tr><td>$</td><td>行结尾，<code>\d$</code>表示必须数字结尾</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]</td></tr><tr><td>{n}</td><td>表示n个字符</td></tr><tr><td>{n,m}</td><td>表示n-m个字符</td></tr><tr><td>AIB</td><td>可以匹配A或者B，(PIp)ython</td></tr><tr><td>[0-9a-zA-Z_]</td><td>可以匹配一个数字、字母或者下划线组成的字符串</td></tr><tr><td>[0-9a-zA-Z_]+</td><td>可以匹配至少一个数字、字母或者下划线组成的字符串</td></tr><tr><td>[a-zA-Z_][0-9a-zA-Z_]*</td><td>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量</td></tr><tr><td>[a-zA-Z_][0-9a-zA-Z_]{0, 19}</td><td>精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="匹配电话号码"><a href="#匹配电话号码" class="headerlink" title="匹配电话号码"></a>匹配电话号码</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span><span class="tag">\<span class="name">-</span></span><span class="tag">\<span class="name">d</span><span class="string">&#123;3,8&#125;</span></span></span><br></pre></td></tr></table></figure><p>先匹配三个数字，再匹配‘-’，最后匹配3-8个数字。<br>可以匹配一个带区号的电话号码，如：<code>123-456789</code></p><h4 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h4><p>split()方法语法：<code>str.split(str=&quot;&quot;, num=string.count(str)).</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>,<span class="string">'a,b;;c,,,d  e'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><blockquote><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。</p></blockquote><p><code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码</p><h4 id="正则转义与字符串转义"><a href="#正则转义与字符串转义" class="headerlink" title="正则转义与字符串转义"></a>正则转义与字符串转义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment"># coding=utf-8  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">  </span><br><span class="line">string = <span class="string">'3\8'</span>  </span><br><span class="line">m = re.search(<span class="string">'(\d+)\\\\'</span>, string)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">print</span> m.group(<span class="number">1</span>)  <span class="comment"># 结果为：3  </span></span><br><span class="line">  </span><br><span class="line">n = re.search(<span class="string">r'(\d+)\\'</span>, string)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> n <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">print</span> n.group(<span class="number">1</span>)  <span class="comment"># 结果为：3</span></span><br></pre></td></tr></table></figure><p>1.没有用<code>r&#39;&#39;</code>格式：<code>(\d+)\\\\</code>的右斜杠先字符串转义为<code>\ \</code> ,再进行正则转义为<code>\</code>；<br>2.用<code>r&#39;&#39;</code>格式：<code>(\d+)\\</code>的右斜杠无需字符串转义 ,直接进行正则转义为<code>\</code>；<br>3.结论：字符串转义优先于正则转义。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><blockquote><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-123456'</span>).groups()</span><br><span class="line">(<span class="string">'010'</span>, <span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><h5 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h5><p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：<br>someone@gmail.com<br>bill.gates@microsoft.com</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re_test=re.compile(<span class="string">r'^([0-9a-zA-Z\_\.]+)\@([0-9a-zA-Z\_]+)\.([0-9a-zA-Z\_]+)$'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_email</span><span class="params">(addr)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> re.match(re_test , addr):</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">     <span class="keyword">else</span> :</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">'someone@gmail.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">'bill.gates@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">'bob#example.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">'mr-bob@example.com'</span>)</span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h5 id="题2"><a href="#题2" class="headerlink" title="题2"></a>题2</h5><p>版本二可以提取出带名字的Email地址：</p><p><tom paris=""> tom@voyager.org =&gt; Tom Paris<br> bob@example.com =&gt; bob</tom></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re_name_of_email = re.compile(<span class="string">r'^\&lt;([0-9a-zA-Z\_\.]+\s[0-9a-zA-Z\_\.]+)\&gt;\s([0-9a-zA-Z\_\.]+)?\@([0-9a-zA-Z\_]+)?\.([0-9a-zA-Z\_]+)$'</span>)</span><br><span class="line">re_name_of_email_2 = re.compile(<span class="string">r'^([0-9a-zA-Z]+)\@([0-9a-zA-Z\_]+)\.([0-9a-zA-Z\_]+)$'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_of_email</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> re_name_of_email.match(addr):</span><br><span class="line">        <span class="keyword">return</span> re_name_of_email.match(addr).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> re_name_of_email_2.match(addr).group(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'&lt;Tom Paris&gt; tom@voyager.org'</span>) == <span class="string">'Tom Paris'</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'tom@voyager.org'</span>) == <span class="string">'tom'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'tom@voyager.org'</span>) == <span class="string">'tom'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h4 id="作业总结"><a href="#作业总结" class="headerlink" title="作业总结"></a>作业总结</h4><div class="note info"><p>注意：</p></div><p>判断正则表达式是否匹配成功，还是要用以下方法比较好：</p><blockquote><p>match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'用户输入的字符串'</span></span><br><span class="line"><span class="keyword">if</span> re.match(<span class="string">r'正则表达式'</span>, test):</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>“hexo部署后，Github绑定的域名总被删除”解决方案</title>
    <link href="http://hust.life/2017/12/22/tech-2017-12-22-hexo-CNAME-bug/"/>
    <id>http://hust.life/2017/12/22/tech-2017-12-22-hexo-CNAME-bug/</id>
    <published>2017-12-22T15:20:00.000Z</published>
    <updated>2017-12-24T05:41:46.779Z</updated>
    
    <content type="html"><![CDATA[<p>将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。<br>现象：<br>每次<code>hexo d</code>之后，原本绑定的域名自动回到<code>yourname.github.io</code><br><img src="http://p0xt50lze.bkt.clouddn.com/17-12-23/60270558.jpg" alt=""><br><a id="more"></a><br><strong>原因是<code>hexo d</code>命令之后自动删除了CNAME文件</strong><br>解决方案如图：<img src="http://p0xt50lze.bkt.clouddn.com/17-12-23/25748699.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。&lt;br&gt;现象：&lt;br&gt;每次&lt;code&gt;hexo d&lt;/code&gt;之后，原本绑定的域名自动回到&lt;code&gt;yourname.github.io&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://p0xt50lze.bkt.clouddn.com/17-12-23/60270558.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://hust.life/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Next主题背景颜色修改或添加图片</title>
    <link href="http://hust.life/2017/12/22/tech-2017-12-22-hexo-next-bug/"/>
    <id>http://hust.life/2017/12/22/tech-2017-12-22-hexo-next-bug/</id>
    <published>2017-12-22T15:20:00.000Z</published>
    <updated>2017-12-22T16:59:39.748Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了如何修改Hexo的NexT主题的背景颜色及添加背景图片<br>Hexo NexT的主题什么我都觉得挺好的，就是背景太单调，而我又不喜欢内置的那几个背景动画，虽然看上去比较有科技感，但实际上会分散人的注意力，不利于专注于博客内容，这对作者还是读者都不是什么好事。</p><h3 id="修改背景动画"><a href="#修改背景动画" class="headerlink" title="修改背景动画"></a>修改背景动画</h3><p>修改<code>/themes/next/_config.yml</code>文件以下内容，开启动画只需任意一个属性修改为<code>true</code>，而且至多一个属性为<code>true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Only fit scheme Pisces#修改这里</span></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改背景颜色"><a href="#修改背景颜色" class="headerlink" title="修改背景颜色"></a>修改背景颜色</h3><p>其实就是运用了css语法知识罢了。打开<code>\themes\next\source\css\_custom\custom.styl</code><br>修改：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: 颜色值; <span class="comment">// 或替代为image</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改为图片背景"><a href="#修改为图片背景" class="headerlink" title="修改为图片背景"></a>修改为图片背景</h3><p><strong>发现网上的代码虽然在PC的浏览器显示正常，但是IPad的Safari显示图片不是fixed的而是滚降的，在Stack Overflow找到了答案</strong><br>以下代码修改了bug：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background</span>:<span class="built_in">url</span>(http://p0xt50lze.bkt.clouddn.com/17-12-22/20656014.jpg);<span class="attribute">background-attachment</span>: fixed;<span class="attribute">-webkit-background-size</span>: <span class="number">1600px</span> <span class="number">900px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'http://p0xt50lze.bkt.clouddn.com/17-12-22/20656014.jpg'</span>);</span><br><span class="line">    <span class="attribute">background-size</span>:  <span class="number">1600px</span> <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感兴趣的话，可以自己Google<a href="http://www.leevii.com/2017/03/%E5%85%B3%E4%BA%8Eios%E7%9A%84safari%E6%B5%8F%E8%A7%88%E5%99%A8fixed%E5%AE%9A%E4%BD%8D%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91.html" target="_blank" rel="noopener">“关于IOS的Safari浏览器fixed定位失效的那些坑”</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍了如何修改Hexo的NexT主题的背景颜色及添加背景图片&lt;br&gt;Hexo NexT的主题什么我都觉得挺好的，就是背景太单调，而我又不喜欢内置的那几个背景动画，虽然看上去比较有科技感，但实际上会分散人的注意力，不利于专注于博客内容，这对作者还是读者都不是什么好事。&lt;/p&gt;
&lt;h3 id=&quot;修改背景动画&quot;&gt;&lt;a href=&quot;#修改背景动画&quot; class=&quot;headerlink&quot; title=&quot;修改背景动画&quot;&gt;&lt;/a&gt;修改背景动画&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;/themes/next/_config.yml&lt;/code&gt;文件以下内容，开启动画只需任意一个属性修改为&lt;code&gt;true&lt;/code&gt;，而且至多一个属性为&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Canvas-nest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_nest:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# three_waves&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;three_waves:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# canvas_lines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_lines:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# canvas_sphere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_sphere:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Only fit scheme Pisces#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Canvas-ribbon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_ribbon:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://hust.life/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>钻牛角尖是不明智的</title>
    <link href="http://hust.life/2017/12/22/life-2017-12-22-ridiculous/"/>
    <id>http://hust.life/2017/12/22/life-2017-12-22-ridiculous/</id>
    <published>2017-12-22T04:20:00.000Z</published>
    <updated>2017-12-22T04:59:53.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建博客经历"><a href="#搭建博客经历" class="headerlink" title="搭建博客经历"></a>搭建博客经历</h3><ol><li>21号发现阿里云域名给我停止解析了，赶紧向客服反映，又发现原先的<code>jekyll</code>主题（yansu）的feed有bug，总之jekyll问题真的太多了，想找到称心如意的主题太难</li><li>21号选择hexo主题next，搭建博客到晚上12点，github部署完毕，修改date属性</li><li>22号配置主题页面、背景etc. </li><li>关闭所有动画特效，这让人阅读分心，降低效率。</li><li>博客背景更换为CG图，黑白背景让人看得眼睛难受，具体修改参考<a href="https://zouzls.github.io/2017/03/17/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E4%B8%AA%E6%80%A7%E5%8C%96DIY/" target="_blank" rel="noopener">Gs Chen博客文章</a></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>搭建<code>github pages</code>毕竟可以用“万事开头难”形容，一旦固定了博客的style，就不要随便改动，浪费时间在这上面不如多写几行代码，多刷几套题。</li><li>今天下午学习Python threadLocal内容，晚上复习DSP和通信原理。</li><li><p>能不能保研还说不定呢，努力学好这些专业基础课，争取保研，能保研本校就不要去考研了。</p><p><strong>还有，等阿里云客服处理3天时间，这三天我不再主动联系他们了，如果3天还没有解决问题，我就只好在<code>godaddy</code>购买域名了。国内的域名管理真是严格到令人发指啊</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      对于自己的博客，真的有种强迫症的感觉。21号花了一整天，22号花了一上午。终于把博客主题配置完成。予作文以记之。
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-线程</title>
    <link href="http://hust.life/2017/12/21/tech-2017-12-21-python-thread/"/>
    <id>http://hust.life/2017/12/21/tech-2017-12-21-python-thread/</id>
    <published>2017-12-21T08:00:00.000Z</published>
    <updated>2017-12-22T16:43:23.501Z</updated>
    
    <content type="html"><![CDATA[<p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p><p>进程是由若干线程组成的，一个进程至少有一个线程。</p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><p>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>开始执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time,threading</span><br><span class="line"><span class="comment">#新线程执行的代码</span></span><br><span class="line">def loop():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'thread %s is running...'</span>%threading.current_thread().name )</span><br><span class="line">    n=0</span><br><span class="line">    <span class="keyword">while</span> n&lt;5:</span><br><span class="line">        n = n+1</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'thread %s &gt;&gt;&gt;%s'</span>%(threading.current_thread().name,n))</span><br><span class="line">        time.sleep(1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'thread %s ended.'</span>%threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印线程名字，默认thread-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'thread %s is running...'</span>%threading.current_thread().name)</span><br><span class="line"><span class="comment">#传入线程执行的程序，这里只有一个线程</span></span><br><span class="line">t = threading.Thread(target=loop)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'thread %s ended'</span>% threading.current_thread().name)</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>多线程导致的变量被随意修改问题解决-lock</strong></p><p>当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p><p>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try…finally来确保锁一定会被释放。</p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。</p><p>其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import time,threading</span><br><span class="line"></span><br><span class="line"><span class="comment">#假定这是你的银行存款</span></span><br><span class="line">balance = 0</span><br><span class="line">lock = threading.Lock()</span><br><span class="line">def change_it(n):</span><br><span class="line">    <span class="comment">#先存后取，结果应该为0</span></span><br><span class="line">    global balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line">def run_thread(n):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(100000):</span><br><span class="line">        <span class="comment">#先要获取锁：</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        try:</span><br><span class="line">            change_it(n)</span><br><span class="line">        finally:</span><br><span class="line">            <span class="comment">#改完了释放锁</span></span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread,args=(5,))</span><br><span class="line">t2 = threading.Thread(target=run_thread,args=(8,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="built_in">print</span>(balance)</span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>多线程编程，模型复杂，容易发生冲突，必须用锁加以隔离，同时，又要小心死锁的发生。</p><p>Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多任务可以由多进程完成，也可以由一个进程内的多线程完成。&lt;/p&gt;
&lt;p&gt;进程是由若干线程组成的，一个进程至少有一个线程。&lt;/p&gt;
&lt;p&gt;Python的标准库提供了两个模块：&lt;code&gt;_thread&lt;/code&gt;和&lt;code&gt;threading&lt;/code&gt;，&lt;code&gt;_thread&lt;/code&gt;是低级模块，&lt;code&gt;threading&lt;/code&gt;是高级模块，对&lt;code&gt;_thread&lt;/code&gt;进行了封装。绝大多数情况下，我们只需要使用&lt;code&gt;threading&lt;/code&gt;这个高级模块。&lt;/p&gt;
&lt;p&gt;启动一个线程就是把一个函数传入并创建&lt;code&gt;Thread&lt;/code&gt;实例，然后调用&lt;code&gt;start()&lt;/code&gt;开始执行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import time,threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#新线程执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def loop():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s is running...&#39;&lt;/span&gt;%threading.current_thread().name )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; n&amp;lt;5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = n+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s &amp;gt;&amp;gt;&amp;gt;%s&#39;&lt;/span&gt;%(threading.current_thread().name,n))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s ended.&#39;&lt;/span&gt;%threading.current_thread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打印线程名字，默认thread-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s is running...&#39;&lt;/span&gt;%threading.current_thread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#传入线程执行的程序，这里只有一个线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = threading.Thread(target=loop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s ended&#39;&lt;/span&gt;% threading.current_thread().name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>if __name__ == &#39;__main__&#39; 如何正确理解?</title>
    <link href="http://hust.life/2017/12/20/tech-2017-12-20-python-name-main/"/>
    <id>http://hust.life/2017/12/20/tech-2017-12-20-python-name-main/</id>
    <published>2017-12-20T08:00:00.000Z</published>
    <updated>2017-12-21T16:14:15.731Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载stackoverflow回答</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file one.py</span></span><br><span class="line">def func():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"func() in one.py"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"top-level in one.py"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"one.py is being run directly"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"one.py is being imported into another module"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># file two.py</span></span><br><span class="line">import one</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"top-level in two.py"</span>)</span><br><span class="line">one.func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"two.py is being run directly"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"two.py is being imported into another module"</span>)</span><br></pre></td></tr></table></figure></p><p>如果你执行one.py文件，python one.py</p><p>会输出：top-level in one.py</p><p>one.py is being run directly</p><p>如果你执行two.py文件，python two.py</p><p>会输出：top-level in one.py</p><p>one.py is being imported into another module</p><p>top-level in two.py</p><p>func() in one.py</p><p>two.py is being run directly</p><p><strong>Thus, when module one gets loaded, its <strong>name</strong> equals “one” instead of <strong>main</strong>.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;转载stackoverflow回答&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-进程</title>
    <link href="http://hust.life/2017/12/19/tech-2017-12-19-python-process-thread/"/>
    <id>http://hust.life/2017/12/19/tech-2017-12-19-python-process-thread/</id>
    <published>2017-12-19T08:00:00.000Z</published>
    <updated>2017-12-22T16:58:50.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p></blockquote><p><code>multiprocessing</code>模块是跨平台版本的多进程模块。</p><p><code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="comment">#子进程要执行的代码</span></span><br><span class="line">def run_proc(name):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Run child process %s (%s)...'</span>%(name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Parent process %s.'</span>% os.getpid())<span class="comment">#getpid()是获取进程的id号</span></span><br><span class="line">   p = Process(target=run_proc,args=(<span class="string">'test'</span>,))</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Child process will start.'</span>)</span><br><span class="line">   p.start()<span class="comment">#开始进程</span></span><br><span class="line">   p.join()<span class="comment">#等待子进程结束再往下运行，通常用于进程间的同步</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Child process end'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="进程直接通信"><a href="#进程直接通信" class="headerlink" title="进程直接通信"></a>进程直接通信</h3><blockquote><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p></blockquote><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import os,time,random</span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据进程执行的代码：</span></span><br><span class="line">def write(q):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Process to write:%s'</span>% os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Put %s to queue...'</span>% value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程执行的代码：</span></span><br><span class="line">def <span class="built_in">read</span>(q):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Process to read:%s'</span>% os.getpid())</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        value = q.get(True)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Get %s from queue.'</span>% value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#父进程创建queue，并传给各个子进程</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write,args=(q,))</span><br><span class="line">    pr = Process(target=<span class="built_in">read</span>,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程pw，写入</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment">#启动子进程pr，读取</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment">#等待pw结束</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment">#pr进程是死循环，无法等待结束，强行终止</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure></p><p><strong>我的理解：</strong></p><p>1.创建了两个进程：Write和Read</p><p>2.Put函数不断向Queue加入数据</p><p>3.get函数其实是阻塞运行，没有读到值，一直阻塞</p><p>4.一旦get读取到Queue里面数据，运行下面的<br><em>print(‘Get %s from queue.’% value)</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt;模块是跨平台版本的多进程模块。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt;模块提供了一个&lt;code&gt;Process&lt;/code&gt;类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from multiprocessing import Process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#子进程要执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def run_proc(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Run child process %s (%s)...&#39;&lt;/span&gt;%(name, os.getpid()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Parent process %s.&#39;&lt;/span&gt;% os.getpid())&lt;span class=&quot;comment&quot;&gt;#getpid()是获取进程的id号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   p = Process(target=run_proc,args=(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Child process will start.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   p.start()&lt;span class=&quot;comment&quot;&gt;#开始进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   p.join()&lt;span class=&quot;comment&quot;&gt;#等待子进程结束再往下运行，通常用于进程间的同步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Child process end&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-IO操作</title>
    <link href="http://hust.life/2017/12/18/tech-2017-12-18-python-io/"/>
    <id>http://hust.life/2017/12/18/tech-2017-12-18-python-io/</id>
    <published>2017-12-18T08:00:00.000Z</published>
    <updated>2017-12-21T16:15:22.899Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件读"><a href="#文件读" class="headerlink" title="文件读"></a>文件读</h3><blockquote><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">finally:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h3 id="文件写"><a href="#文件写" class="headerlink" title="文件写"></a>文件写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'F:/Codeblock_file/FFT/fangzr.github.io/test.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'Hello,world!'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>) as f:</span><br><span class="line">    f.write(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件读&quot;&gt;&lt;a href=&quot;#文件读&quot; class=&quot;headerlink&quot; title=&quot;文件读&quot;&gt;&lt;/a&gt;文件读&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论
      
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-try/except/else/finally语句</title>
    <link href="http://hust.life/2017/12/18/tech-2017-12-18-python-try-finally-except/"/>
    <id>http://hust.life/2017/12/18/tech-2017-12-18-python-try-finally-except/</id>
    <published>2017-12-18T08:00:00.000Z</published>
    <updated>2017-12-24T05:42:55.434Z</updated>
    
    <content type="html"><![CDATA[<p>与其他语言相同，在python中，try/except语句主要是用于处理程序正常执行过程中出现的一些异常情况，如语法错误（python作为脚本语言没有编译的环节，在执行过程中对语法进行检测，出错后发出异常消息）、数据除零错误、从未定义的变量上取值等；</p><p>而try/finally语句则主要用于在无论是否发生异常情况，都需要执行一些清理工作的场合，如在通信过程中，无论通信是否发生错误，都需要在通信完成或者发生错误时关闭网络连接。</p><p>尽管try/except和try/finally的作用不同，但是在编程实践中通常可以把它们组合在一起使用try/except/else/finally的形式来实现稳定性和灵活性更好的设计。</p><p>默认情况下，在程序段的执行过程中，如果没有提供try/except的处理，脚本文件执行过程中所产生的异常消息会自动发送给程序调用端，如python shell，而python shell对异常消息的默认处理则是终止程序的执行并打印具体的出错信息。</p><p>这也是在python shell中执行程序错误后所出现的出错打印信息的由来。</p><p>python中try/except/else/finally语句的完整格式如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">     Normal execution block</span><br><span class="line">except A:</span><br><span class="line">     Exception A handle</span><br><span class="line">except B:</span><br><span class="line">     Exception B handle</span><br><span class="line">except:</span><br><span class="line">     Other exception handle</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">if</span> no exception,get here</span><br><span class="line">finally:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">"finally"</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>说明：</p><p>正常执行的程序在try下面的Normal execution block执行块中执行，在执行过程中如果发生了异常，则中断当前在Normal execution block中的执行跳转到对应的异常处理块中开始执行；</p><p>python从第一个except X处开始查找，如果找到了对应的exception类型则进入其提供的exception handle中进行处理，如果没有找到则直接进入except块处进行处理。except块是可选项，如果没有提供，该exception将会被提交给python进行默认处理，处理方式则是终止应用程序并打印提示信息；</p><p>如果在Normal execution block执行块中执行过程中没有发生任何异常，则在执行完Normal execution block后会进入else执行块中（如果存在的话）执行。</p><p>无论是否发生了异常，只要提供了finally语句，以上try/except/else/finally代码块执行的最后一步总是执行finally所对应的代码块。</p><p><strong>需要注意的是：</strong></p><p>1.在上面所示的完整语句中try/except/else/finally所出现的顺序必须是try–&gt;except X–&gt;except–&gt;else–&gt;finally，即所有的except必须在else和finally之前，else（如果有的话）必须在finally之前，而except X必须在except之前。否则会出现语法错误。</p><p>2.对于上面所展示的try/except完整格式而言，else和finally都是可选的，而不是必须的，但是如果存在的话else必须在finally之前，finally（如果存在的话）必须在整个语句的最后位置。</p><p>3.在上面的完整语句中，else语句的存在必须以except X或者except语句为前提，如果在没有except语句的try block中使用else语句会引发语法错误。也就是说else不能与try/finally配合使用。</p><p>4.except的使用要非常小心，慎用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与其他语言相同，在python中，try/except语句主要是用于处理程序正常执行过程中出现的一些异常情况，如语法错误（python作为脚本语言没有编译的环节，在执行过程中对语法进行检测，出错后发出异常消息）、数据除零错误、从未定义的变量上取值等；&lt;/p&gt;
&lt;p&gt;而try/finally语句则主要用于在无论是否发生异常情况，都需要执行一些清理工作的场合，如在通信过程中，无论通信是否发生错误，都需要在通信完成或者发生错误时关闭网络连接。&lt;/p&gt;
&lt;p&gt;尽管try/except和try/finally的作用不同，但是在编程实践中通常可以把它们组合在一起使用try/except/else/finally的形式来实现稳定性和灵活性更好的设计。&lt;/p&gt;
&lt;p&gt;默认情况下，在程序段的执行过程中，如果没有提供try/except的处理，脚本文件执行过程中所产生的异常消息会自动发送给程序调用端，如python shell，而python shell对异常消息的默认处理则是终止程序的执行并打印具体的出错信息。&lt;/p&gt;
&lt;p&gt;这也是在python shell中执行程序错误后所出现的出错打印信息的由来。&lt;/p&gt;
&lt;p&gt;python中try/except/else/finally语句的完整格式如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Normal execution block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except A:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Exception A handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except B:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Exception B handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Other exception handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; no exception,get here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finally:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;finally&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
</feed>
