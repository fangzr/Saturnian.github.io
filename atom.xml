<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saturnian Blog</title>
  
  <subtitle>Welcome</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hust.life/"/>
  <updated>2017-12-26T10:13:51.278Z</updated>
  <id>http://hust.life/</id>
  
  <author>
    <name>Peter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>叫醒一个装睡的人</title>
    <link href="http://hust.life/2017/12/26/life-2017-12-26-12month-Sentiment/"/>
    <id>http://hust.life/2017/12/26/life-2017-12-26-12month-Sentiment/</id>
    <published>2017-12-26T08:00:00.000Z</published>
    <updated>2017-12-26T10:13:51.278Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到考研群里面热闹非凡，和高考一样，总是有人欢喜有人忧。<br>我认识的几个学长，其中一人，报考的学校和我想报考的是一样的。他从3月开始复习，在考研前，选择放弃。<br>意料之外，情理之中。但我没想到，他居然真的放弃了。虽然和他相处时间也算比较长了，对他的性格也比较了解，但这位学长的放弃也深深地刺激了我。让我再次坚定了信念：大三专心学习，不再参加任何比赛的决定是正确的。</p><blockquote><p>“你为什么放弃了考研？”<br>“保研没保上是我不刷加权，工作拒了是嫌硬件没前途，考研是我没考。我做的事比这三者有意思多了<br>”</p></blockquote><p>以下的话可能有些残忍，但确实是我见到的许许多多实例构成的总结：</p><blockquote><p>总有些人，爱把责任推脱到命运、人品、环境之类的外界因素上，或者义无反顾地对自己洗脑，相信这一切的不顺都是自己喜好的选择罢了，以此来掩盖自己因为懒惰、穷忙、没有自制力、执行力而导致的严重后果。<br>所以，永远不要试图去开导这类人，给他们灌输鸡汤。你愈发安慰他们，他们便愈加嘴硬，反复证明自己的无辜。<br>“你永远无法叫醒一个装睡的人”</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天看到考研群里面热闹非凡，和高考一样，总是有人欢喜有人忧。&lt;br&gt;我认识的几个学长，其中一人，报考的学校和我想报考的是一样的。他从3月开始复习，在考研前，选择放弃。&lt;br&gt;意料之外，情理之中。但我没想到，他居然真的放弃了。虽然和他相处时间也算比较长了，对他的性格也比较了解
      
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-电子邮件编程</title>
    <link href="http://hust.life/2017/12/25/tech-2017-12-21-python-e-mail/"/>
    <id>http://hust.life/2017/12/25/tech-2017-12-21-python-e-mail/</id>
    <published>2017-12-25T15:00:00.000Z</published>
    <updated>2017-12-25T15:48:10.320Z</updated>
    
    <content type="html"><![CDATA[<p>SMTP发送邮件</p><p>SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。</p><p>Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。<br><a id="more"></a></p><h3 id="构造一个最简单的纯文本邮件"><a href="#构造一个最简单的纯文本邮件" class="headerlink" title="构造一个最简单的纯文本邮件"></a>构造一个最简单的纯文本邮件</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from email.mime.text import MIMEText</span><br><span class="line">msg = MIMEText(<span class="string">'hello,send by Python...'</span>,<span class="string">'plain'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">#plain纯文本,utf-8编码保证语言兼容性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#通过SMTP发出去</span></span><br><span class="line">from_addr = input(<span class="string">'From:'</span>)</span><br><span class="line">password = input(<span class="string">'Password:'</span>)</span><br><span class="line"><span class="meta">#输入收件人地址</span></span><br><span class="line">to_addr = input(<span class="string">'To:'</span>)</span><br><span class="line"><span class="meta">#输入SMTP服务器地址</span></span><br><span class="line">smtp_server = input(<span class="string">'SMTP server:'</span>)</span><br><span class="line"></span><br><span class="line">import smtplib</span><br><span class="line"><span class="keyword">server</span> = smtplib.SMTP(smtp_server,<span class="number">25</span>)<span class="meta">#SMTP默认端口25</span></span><br><span class="line"><span class="keyword">server</span>.set_debuglevel(<span class="number">1</span>)<span class="meta">#用set_debuglevel(1)就可以打印出和SMTP服务器交互的所有信息</span></span><br><span class="line"><span class="keyword">server</span>.login(from_addr,password)</span><br><span class="line"><span class="keyword">server</span>.sendmail(from_addr,[to_addr],msg.as_string())</span><br><span class="line"><span class="keyword">server</span>.quit()</span><br></pre></td></tr></table></figure><div class="note info"><p>我们编写了一个函数_format_addr()来格式化一个邮件地址。注意不能简单地传入name <a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x61;&#100;&#100;&#x72;&#x40;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#x61;&#100;&#100;&#x72;&#x40;&#101;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;</a>，因为如果包含中文，需要通过Header对象进行编码。</p><p>msg[‘To’]接收的是字符串而不是list，如果有多个邮件地址，用,分隔即可</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SMTP发送邮件&lt;/p&gt;
&lt;p&gt;SMTP是发送邮件的协议，Python内置对SMTP的支持，可以发送纯文本邮件、HTML邮件以及带附件的邮件。&lt;/p&gt;
&lt;p&gt;Python对SMTP支持有smtplib和email两个模块，email负责构造邮件，smtplib负责发送邮件。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next主题配置技巧总结</title>
    <link href="http://hust.life/2017/12/25/tech-2017-12-22-hexo-next-config/"/>
    <id>http://hust.life/2017/12/25/tech-2017-12-22-hexo-next-config/</id>
    <published>2017-12-25T13:00:00.000Z</published>
    <updated>2017-12-25T15:46:14.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自带样式-note-标签"><a href="#自带样式-note-标签" class="headerlink" title="自带样式 note 标签"></a>自带样式 note 标签</h3><h4 id="default样式"><a href="#default样式" class="headerlink" title="default样式"></a>default样式</h4><div class="note default"><p>default</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note default </span>%&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="primary样式"><a href="#primary样式" class="headerlink" title="primary样式"></a>primary样式</h4><div class="note primary"><p>primary</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>primary %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="success样式"><a href="#success样式" class="headerlink" title="success样式"></a>success样式</h4><div class="note success"><p>success</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>success %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="info样式"><a href="#info样式" class="headerlink" title="info样式"></a>info样式</h4><div class="note info"><p>info</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">info</span> %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="warning样式"><a href="#warning样式" class="headerlink" title="warning样式"></a>warning样式</h4><div class="note warning"><p>warning</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span><span class="builtin-name">warning</span> %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="danger样式"><a href="#danger样式" class="headerlink" title="danger样式"></a>danger样式</h4><div class="note danger"><p>danger</p></div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Tag注意事项"><a href="#使用Tag注意事项" class="headerlink" title="使用Tag注意事项"></a>使用<code>Tag</code>注意事项</h4><div class="note danger"><p>一定要分行写<code>% note xxx %</code>和<code>% note danger %</code>，否则会出现<code>bug</code></p></div>]]></content>
    
    <summary type="html">
    
      总结我学习到的Next主题配置、使用技巧
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://hust.life/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>十二月：反省</title>
    <link href="http://hust.life/2017/12/24/life-2017-12-24-12month-summary/"/>
    <id>http://hust.life/2017/12/24/life-2017-12-24-12month-summary/</id>
    <published>2017-12-23T16:20:00.000Z</published>
    <updated>2017-12-23T16:10:08.944Z</updated>
    
    <content type="html"><![CDATA[<p>今天在知乎上看到了一个问题，问“为什么有人在学习初段效率惊人，而在过了入门阶段之后兴趣与学习能力都迅速下降？”<br>这个问题的回答，一下让我明白自己长期效率低下、对学习意义迷茫的重要原因。<br>初中：学渣向学霸转型。<br>高中：保持学霸状态。<br>我放弃了一切，竭尽全力地追求每次考试的排名。<br>幸运的是，高考结果比平时最好成绩还要好很多。<br>然而，到了大学，我才真正明白这句话的含义：<br><strong>你以为的极限 只是别人的起点</strong><br><a id="more"></a><br>我先是被巨佬们一路碾压，大佬们不仅加权高，课外生活丰富，竞赛成绩优异，还早早地找到男（女）朋友。而我呢？保研无望，竞赛失利，独自一人自习2年……<br>相比较高中生活，真的差距好大。大到让我感觉到了自己努力的无力，我常常思索“既然别人都已经做得这么出色了，那我做还有什么意义呢？”<br>借<a href="https://mukosame.github.io/" target="_blank" rel="noopener">向小雨</a>的话：</p><blockquote><p>毕竟新环境里，没有一个人不比自己强，无论自己做什么，前头都有人挡着，而且常常那个人还把一切都挡严实了……以前的时候，我是万万受不住的，毕竟引导自己的价值观就是在一个同生群里，在线性的评估中占得鳌头。</p></blockquote><p>所以，我必须接受自己在某一方面的不足，到了大学，基本不可能像高中一样以排名成绩的虚荣感支撑自己努力。为了获得这种虚荣感，我也可能做出不理智的选择，比如花很多时间在竞赛上面，总是想做一些让别人佩服的事情。我要改变自己的生活态度。<strong>而改变这种浮躁的态度关键，就是安下心，踏踏实实的学习。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.放弃那些虚荣的做法吧，学习不是为了给别人看。安下心，踏踏实实的学习。<br>2.专心于课内知识学习和<code>Python</code>学习，要有耐心，要能耐得住寂寞，要有长期的计划，不要急于把自己的成果展现出来。（博客怕也是虚荣的表现= =）<br>3.我不是天才，我是凡人。正视缺点，踏实前进。<br>4.放低不合理期望，合理规划时间。长期努力而不是短期拼命。<br>5.so，对于精力的管控很重要。以及，你并不像自己想象的那么爱玩。有时候你在玩，只是因为不知道该做什么而已；<br>6.综上，早睡早起好身体，考研是场马拉松，坚持到最后才是赢家。</p><h3 id="知乎回答："><a href="#知乎回答：" class="headerlink" title="知乎回答："></a>知乎回答：</h3><blockquote><p>怎么克服我也是这两三年才想明白的。 对于这个问题，更为准确的描述是这样的：<br>在学习某项知识或锻炼某项技能时，可以轻易的超过很多人，但是很难更进一步，最后总会被努力的人和真正的天才超越。<br>学习能力效率高的原因是，学习和思维能力强，加上专注力高。 至于为何不能更进一步，下面说话就比较狠，但是确实是这样的。<br>其实原因很简单，因为在需要更进一步的时候，肯定需要更为努力和钻研，然而前期的顺利和取得的赞美与成就，让我们无法忍耐这比较长时间的练习和积累期。<br>在刚学一个东西的时候，我们会很拼。练吉他的话，爬格子会爬一整天；写游戏的话，可能会连续熬几天一口气做完。因为我们很清楚我们的学习和工作的效率很高，只要花费这少量的时间，我们就可以获得别人的赞美。然而在看到了新的、更为广阔的世界的同时，我们会发现要在这个世界里让别人赞美，需要花费更多的精力和时间去前进，而这个时间还很长。<br>但我们这种人最无法忍受的就是，不能在很短时间内就可以取得让他人称赞的成绩。我们做很多事情，主要原因固然是因为自己喜欢。但还有一个或许会被自己刻意忽视的重要原因，那就是我们要做给别人看，告诉别人我们很厉害。这种太过在意他人看法的性格，叫做虚荣。这种虚荣让我们在学习和做事的时候过于功利。<br>那么问题来了，如何克服呢？其实也很简单。就是安下心，踏踏实实的学习。<br>题主你说要专精一门，这是对的。不过我还有一个看法，就是我们在专精一门的时候，未必要放弃技能树的其他内容。这是我们天生的优势。但是我们要注意的是，在专精这一门的时候，要有耐心，要能耐得住寂寞，要有长期的计划，不要急于把自己的成果展现出来。<br>要能正视自己的不足，一步步的去学习和练习。同时要告诉自己，我不是天才。<br>更新一点：要合理规划时间，短期的过分拼命会让自己在阶段性目标达成后，产生懈怠感。<br>作者：雨少主<br>链接：<a href="https://www.zhihu.com/question/26761055/answer/33929400" target="_blank" rel="noopener">https://www.zhihu.com/question/26761055/answer/33929400</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在知乎上看到了一个问题，问“为什么有人在学习初段效率惊人，而在过了入门阶段之后兴趣与学习能力都迅速下降？”&lt;br&gt;这个问题的回答，一下让我明白自己长期效率低下、对学习意义迷茫的重要原因。&lt;br&gt;初中：学渣向学霸转型。&lt;br&gt;高中：保持学霸状态。&lt;br&gt;我放弃了一切，竭尽全力地追求每次考试的排名。&lt;br&gt;幸运的是，高考结果比平时最好成绩还要好很多。&lt;br&gt;然而，到了大学，我才真正明白这句话的含义：&lt;br&gt;&lt;strong&gt;你以为的极限 只是别人的起点&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-正则表达式</title>
    <link href="http://hust.life/2017/12/23/tech-2017-12-21-python-regular-expression/"/>
    <id>http://hust.life/2017/12/23/tech-2017-12-21-python-regular-expression/</id>
    <published>2017-12-23T03:00:00.000Z</published>
    <updated>2017-12-25T12:50:25.410Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><a id="more"></a><h3 id="常用表达式"><a href="#常用表达式" class="headerlink" title="常用表达式"></a>常用表达式</h3><table><thead><tr><th>常用表达式</th><th>功能</th></tr></thead><tbody><tr><td>\d</td><td>一配一个数字</td></tr><tr><td>\w</td><td>匹配一个数字或字母</td></tr><tr><td>.</td><td>可以匹配任意字符</td></tr><tr><td>+</td><td>表示至少一个字符</td></tr><tr><td>？</td><td>表示0个或者1个字符</td></tr><tr><td>^</td><td>行开头，<code>^\d</code>表示必须数字开头</td></tr><tr><td>$</td><td>行结尾，<code>\d$</code>表示必须数字结尾</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]</td></tr><tr><td>{n}</td><td>表示n个字符</td></tr><tr><td>{n,m}</td><td>表示n-m个字符</td></tr><tr><td>AIB</td><td>可以匹配A或者B，(PIp)ython</td></tr><tr><td>[0-9a-zA-Z_]</td><td>可以匹配一个数字、字母或者下划线组成的字符串</td></tr><tr><td>[0-9a-zA-Z_]+</td><td>可以匹配至少一个数字、字母或者下划线组成的字符串</td></tr><tr><td>[a-zA-Z_][0-9a-zA-Z_]*</td><td>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量</td></tr><tr><td>[a-zA-Z_][0-9a-zA-Z_]{0, 19}</td><td>精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="匹配电话号码"><a href="#匹配电话号码" class="headerlink" title="匹配电话号码"></a>匹配电话号码</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span><span class="tag">\<span class="name">-</span></span><span class="tag">\<span class="name">d</span><span class="string">&#123;3,8&#125;</span></span></span><br></pre></td></tr></table></figure><p>先匹配三个数字，再匹配‘-’，最后匹配3-8个数字。<br>可以匹配一个带区号的电话号码，如：<code>123-456789</code></p><h4 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h4><p>split()方法语法：<code>str.split(str=&quot;&quot;, num=string.count(str)).</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\s\,\;]+'</span>,<span class="string">'a,b;;c,,,d  e'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><blockquote><p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。</p></blockquote><p><code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码</p><h4 id="正则转义与字符串转义"><a href="#正则转义与字符串转义" class="headerlink" title="正则转义与字符串转义"></a>正则转义与字符串转义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment"># coding=utf-8  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">  </span><br><span class="line">string = <span class="string">'3\8'</span>  </span><br><span class="line">m = re.search(<span class="string">'(\d+)\\\\'</span>, string)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">print</span> m.group(<span class="number">1</span>)  <span class="comment"># 结果为：3  </span></span><br><span class="line">  </span><br><span class="line">n = re.search(<span class="string">r'(\d+)\\'</span>, string)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> n <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:  </span><br><span class="line">    <span class="keyword">print</span> n.group(<span class="number">1</span>)  <span class="comment"># 结果为：3</span></span><br></pre></td></tr></table></figure><p>1.没有用<code>r&#39;&#39;</code>格式：<code>(\d+)\\\\</code>的右斜杠先字符串转义为<code>\ \</code> ,再进行正则转义为<code>\</code>；<br>2.用<code>r&#39;&#39;</code>格式：<code>(\d+)\\</code>的右斜杠无需字符串转义 ,直接进行正则转义为<code>\</code>；<br>3.结论：字符串转义优先于正则转义。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><blockquote><p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone = re.compile(<span class="string">r'^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re_telephone.match(<span class="string">'010-123456'</span>).groups()</span><br><span class="line">(<span class="string">'010'</span>, <span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><h5 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h5><p>请尝试写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email：<br>someone@gmail.com<br>bill.gates@microsoft.com</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re_test=re.compile(<span class="string">r'^([0-9a-zA-Z\_\.]+)\@([0-9a-zA-Z\_]+)\.([0-9a-zA-Z\_]+)$'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid_email</span><span class="params">(addr)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> re.match(re_test , addr):</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">     <span class="keyword">else</span> :</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">'someone@gmail.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> is_valid_email(<span class="string">'bill.gates@microsoft.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">'bob#example.com'</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> is_valid_email(<span class="string">'mr-bob@example.com'</span>)</span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h5 id="题2"><a href="#题2" class="headerlink" title="题2"></a>题2</h5><p>版本二可以提取出带名字的Email地址：</p><p><tom paris=""> tom@voyager.org =&gt; Tom Paris<br> bob@example.com =&gt; bob</tom></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re_name_of_email = re.compile(<span class="string">r'^\&lt;([0-9a-zA-Z\_\.]+\s[0-9a-zA-Z\_\.]+)\&gt;\s([0-9a-zA-Z\_\.]+)?\@([0-9a-zA-Z\_]+)?\.([0-9a-zA-Z\_]+)$'</span>)</span><br><span class="line">re_name_of_email_2 = re.compile(<span class="string">r'^([0-9a-zA-Z]+)\@([0-9a-zA-Z\_]+)\.([0-9a-zA-Z\_]+)$'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_of_email</span><span class="params">(addr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> re_name_of_email.match(addr):</span><br><span class="line">        <span class="keyword">return</span> re_name_of_email.match(addr).group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> re_name_of_email_2.match(addr).group(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'&lt;Tom Paris&gt; tom@voyager.org'</span>) == <span class="string">'Tom Paris'</span></span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'tom@voyager.org'</span>) == <span class="string">'tom'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br><span class="line"><span class="keyword">assert</span> name_of_email(<span class="string">'tom@voyager.org'</span>) == <span class="string">'tom'</span></span><br><span class="line">print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><h4 id="作业总结"><a href="#作业总结" class="headerlink" title="作业总结"></a>作业总结</h4><div class="note info"><p>注意：</p></div><p>判断正则表达式是否匹配成功，还是要用以下方法比较好：</p><blockquote><p>match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'用户输入的字符串'</span></span><br><span class="line"><span class="keyword">if</span> re.match(<span class="string">r'正则表达式'</span>, test):</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Next主题背景颜色修改或添加图片</title>
    <link href="http://hust.life/2017/12/22/tech-2017-12-22-hexo-next-bug/"/>
    <id>http://hust.life/2017/12/22/tech-2017-12-22-hexo-next-bug/</id>
    <published>2017-12-22T15:20:00.000Z</published>
    <updated>2017-12-22T16:59:39.748Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了如何修改Hexo的NexT主题的背景颜色及添加背景图片<br>Hexo NexT的主题什么我都觉得挺好的，就是背景太单调，而我又不喜欢内置的那几个背景动画，虽然看上去比较有科技感，但实际上会分散人的注意力，不利于专注于博客内容，这对作者还是读者都不是什么好事。</p><h3 id="修改背景动画"><a href="#修改背景动画" class="headerlink" title="修改背景动画"></a>修改背景动画</h3><p>修改<code>/themes/next/_config.yml</code>文件以下内容，开启动画只需任意一个属性修改为<code>true</code>，而且至多一个属性为<code>true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span><span class="comment">#修改这里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Only fit scheme Pisces#修改这里</span></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改背景颜色"><a href="#修改背景颜色" class="headerlink" title="修改背景颜色"></a>修改背景颜色</h3><p>其实就是运用了css语法知识罢了。打开<code>\themes\next\source\css\_custom\custom.styl</code><br>修改：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: 颜色值; <span class="comment">// 或替代为image</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改为图片背景"><a href="#修改为图片背景" class="headerlink" title="修改为图片背景"></a>修改为图片背景</h3><p><strong>发现网上的代码虽然在PC的浏览器显示正常，但是IPad的Safari显示图片不是fixed的而是滚降的，在Stack Overflow找到了答案</strong><br>以下代码修改了bug：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background</span>:<span class="built_in">url</span>(http://p0xt50lze.bkt.clouddn.com/17-12-22/20656014.jpg);<span class="attribute">background-attachment</span>: fixed;<span class="attribute">-webkit-background-size</span>: <span class="number">1600px</span> <span class="number">900px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123; </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'http://p0xt50lze.bkt.clouddn.com/17-12-22/20656014.jpg'</span>);</span><br><span class="line">    <span class="attribute">background-size</span>:  <span class="number">1600px</span> <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感兴趣的话，可以自己Google<a href="http://www.leevii.com/2017/03/%E5%85%B3%E4%BA%8Eios%E7%9A%84safari%E6%B5%8F%E8%A7%88%E5%99%A8fixed%E5%AE%9A%E4%BD%8D%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91.html" target="_blank" rel="noopener">“关于IOS的Safari浏览器fixed定位失效的那些坑”</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍了如何修改Hexo的NexT主题的背景颜色及添加背景图片&lt;br&gt;Hexo NexT的主题什么我都觉得挺好的，就是背景太单调，而我又不喜欢内置的那几个背景动画，虽然看上去比较有科技感，但实际上会分散人的注意力，不利于专注于博客内容，这对作者还是读者都不是什么好事。&lt;/p&gt;
&lt;h3 id=&quot;修改背景动画&quot;&gt;&lt;a href=&quot;#修改背景动画&quot; class=&quot;headerlink&quot; title=&quot;修改背景动画&quot;&gt;&lt;/a&gt;修改背景动画&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;/themes/next/_config.yml&lt;/code&gt;文件以下内容，开启动画只需任意一个属性修改为&lt;code&gt;true&lt;/code&gt;，而且至多一个属性为&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;# Canvas-nest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_nest:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# three_waves&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;three_waves:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# canvas_lines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_lines:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# canvas_sphere&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_sphere:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Only fit scheme Pisces#修改这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Canvas-ribbon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;canvas_ribbon:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://hust.life/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>“hexo部署后，Github绑定的域名总被删除”解决方案</title>
    <link href="http://hust.life/2017/12/22/tech-2017-12-22-hexo-CNAME-bug/"/>
    <id>http://hust.life/2017/12/22/tech-2017-12-22-hexo-CNAME-bug/</id>
    <published>2017-12-22T15:20:00.000Z</published>
    <updated>2017-12-24T05:41:46.779Z</updated>
    
    <content type="html"><![CDATA[<p>将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。<br>现象：<br>每次<code>hexo d</code>之后，原本绑定的域名自动回到<code>yourname.github.io</code><br><img src="http://p0xt50lze.bkt.clouddn.com/17-12-23/60270558.jpg" alt=""><br><a id="more"></a><br><strong>原因是<code>hexo d</code>命令之后自动删除了CNAME文件</strong><br>解决方案如图：<img src="http://p0xt50lze.bkt.clouddn.com/17-12-23/25748699.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将需要上传至github的内容放在source文件夹，例如CNAME、favicon.ico、images等。&lt;br&gt;现象：&lt;br&gt;每次&lt;code&gt;hexo d&lt;/code&gt;之后，原本绑定的域名自动回到&lt;code&gt;yourname.github.io&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://p0xt50lze.bkt.clouddn.com/17-12-23/60270558.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://hust.life/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>钻牛角尖是不明智的</title>
    <link href="http://hust.life/2017/12/22/life-2017-12-22-ridiculous/"/>
    <id>http://hust.life/2017/12/22/life-2017-12-22-ridiculous/</id>
    <published>2017-12-22T04:20:00.000Z</published>
    <updated>2017-12-22T04:59:53.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建博客经历"><a href="#搭建博客经历" class="headerlink" title="搭建博客经历"></a>搭建博客经历</h3><ol><li>21号发现阿里云域名给我停止解析了，赶紧向客服反映，又发现原先的<code>jekyll</code>主题（yansu）的feed有bug，总之jekyll问题真的太多了，想找到称心如意的主题太难</li><li>21号选择hexo主题next，搭建博客到晚上12点，github部署完毕，修改date属性</li><li>22号配置主题页面、背景etc. </li><li>关闭所有动画特效，这让人阅读分心，降低效率。</li><li>博客背景更换为CG图，黑白背景让人看得眼睛难受，具体修改参考<a href="https://zouzls.github.io/2017/03/17/Next%E4%B8%BB%E9%A2%98%E8%83%8C%E6%99%AF%E4%B8%AA%E6%80%A7%E5%8C%96DIY/" target="_blank" rel="noopener">Gs Chen博客文章</a></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>搭建<code>github pages</code>毕竟可以用“万事开头难”形容，一旦固定了博客的style，就不要随便改动，浪费时间在这上面不如多写几行代码，多刷几套题。</li><li>今天下午学习Python threadLocal内容，晚上复习DSP和通信原理。</li><li><p>能不能保研还说不定呢，努力学好这些专业基础课，争取保研，能保研本校就不要去考研了。</p><p><strong>还有，等阿里云客服处理3天时间，这三天我不再主动联系他们了，如果3天还没有解决问题，我就只好在<code>godaddy</code>购买域名了。国内的域名管理真是严格到令人发指啊</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      对于自己的博客，真的有种强迫症的感觉。21号花了一整天，22号花了一上午。终于把博客主题配置完成。予作文以记之。
    
    </summary>
    
      <category term="生活" scheme="http://hust.life/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://hust.life/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-线程</title>
    <link href="http://hust.life/2017/12/21/tech-2017-12-21-python-thread/"/>
    <id>http://hust.life/2017/12/21/tech-2017-12-21-python-thread/</id>
    <published>2017-12-21T08:00:00.000Z</published>
    <updated>2017-12-22T16:43:23.501Z</updated>
    
    <content type="html"><![CDATA[<p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p><p>进程是由若干线程组成的，一个进程至少有一个线程。</p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><p>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>开始执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time,threading</span><br><span class="line"><span class="comment">#新线程执行的代码</span></span><br><span class="line">def loop():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'thread %s is running...'</span>%threading.current_thread().name )</span><br><span class="line">    n=0</span><br><span class="line">    <span class="keyword">while</span> n&lt;5:</span><br><span class="line">        n = n+1</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'thread %s &gt;&gt;&gt;%s'</span>%(threading.current_thread().name,n))</span><br><span class="line">        time.sleep(1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'thread %s ended.'</span>%threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印线程名字，默认thread-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'thread %s is running...'</span>%threading.current_thread().name)</span><br><span class="line"><span class="comment">#传入线程执行的程序，这里只有一个线程</span></span><br><span class="line">t = threading.Thread(target=loop)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'thread %s ended'</span>% threading.current_thread().name)</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>多线程导致的变量被随意修改问题解决-lock</strong></p><p>当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p><p>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try…finally来确保锁一定会被释放。</p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。</p><p>其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import time,threading</span><br><span class="line"></span><br><span class="line"><span class="comment">#假定这是你的银行存款</span></span><br><span class="line">balance = 0</span><br><span class="line">lock = threading.Lock()</span><br><span class="line">def change_it(n):</span><br><span class="line">    <span class="comment">#先存后取，结果应该为0</span></span><br><span class="line">    global balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line">def run_thread(n):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(100000):</span><br><span class="line">        <span class="comment">#先要获取锁：</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        try:</span><br><span class="line">            change_it(n)</span><br><span class="line">        finally:</span><br><span class="line">            <span class="comment">#改完了释放锁</span></span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread,args=(5,))</span><br><span class="line">t2 = threading.Thread(target=run_thread,args=(8,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"><span class="built_in">print</span>(balance)</span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>多线程编程，模型复杂，容易发生冲突，必须用锁加以隔离，同时，又要小心死锁的发生。</p><p>Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多任务可以由多进程完成，也可以由一个进程内的多线程完成。&lt;/p&gt;
&lt;p&gt;进程是由若干线程组成的，一个进程至少有一个线程。&lt;/p&gt;
&lt;p&gt;Python的标准库提供了两个模块：&lt;code&gt;_thread&lt;/code&gt;和&lt;code&gt;threading&lt;/code&gt;，&lt;code&gt;_thread&lt;/code&gt;是低级模块，&lt;code&gt;threading&lt;/code&gt;是高级模块，对&lt;code&gt;_thread&lt;/code&gt;进行了封装。绝大多数情况下，我们只需要使用&lt;code&gt;threading&lt;/code&gt;这个高级模块。&lt;/p&gt;
&lt;p&gt;启动一个线程就是把一个函数传入并创建&lt;code&gt;Thread&lt;/code&gt;实例，然后调用&lt;code&gt;start()&lt;/code&gt;开始执行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import time,threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#新线程执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def loop():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s is running...&#39;&lt;/span&gt;%threading.current_thread().name )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; n&amp;lt;5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = n+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s &amp;gt;&amp;gt;&amp;gt;%s&#39;&lt;/span&gt;%(threading.current_thread().name,n))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s ended.&#39;&lt;/span&gt;%threading.current_thread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#打印线程名字，默认thread-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s is running...&#39;&lt;/span&gt;%threading.current_thread().name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#传入线程执行的程序，这里只有一个线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = threading.Thread(target=loop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;thread %s ended&#39;&lt;/span&gt;% threading.current_thread().name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>if __name__ == &#39;__main__&#39; 如何正确理解?</title>
    <link href="http://hust.life/2017/12/20/tech-2017-12-20-python-name-main/"/>
    <id>http://hust.life/2017/12/20/tech-2017-12-20-python-name-main/</id>
    <published>2017-12-20T08:00:00.000Z</published>
    <updated>2017-12-21T16:14:15.731Z</updated>
    
    <content type="html"><![CDATA[<p><em>转载stackoverflow回答</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file one.py</span></span><br><span class="line">def func():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"func() in one.py"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"top-level in one.py"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"one.py is being run directly"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"one.py is being imported into another module"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># file two.py</span></span><br><span class="line">import one</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"top-level in two.py"</span>)</span><br><span class="line">one.func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"two.py is being run directly"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"two.py is being imported into another module"</span>)</span><br></pre></td></tr></table></figure></p><p>如果你执行one.py文件，python one.py</p><p>会输出：top-level in one.py</p><p>one.py is being run directly</p><p>如果你执行two.py文件，python two.py</p><p>会输出：top-level in one.py</p><p>one.py is being imported into another module</p><p>top-level in two.py</p><p>func() in one.py</p><p>two.py is being run directly</p><p><strong>Thus, when module one gets loaded, its <strong>name</strong> equals “one” instead of <strong>main</strong>.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;转载stackoverflow回答&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-进程</title>
    <link href="http://hust.life/2017/12/19/tech-2017-12-19-python-process-thread/"/>
    <id>http://hust.life/2017/12/19/tech-2017-12-19-python-process-thread/</id>
    <published>2017-12-19T08:00:00.000Z</published>
    <updated>2017-12-22T16:58:50.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。</p></blockquote><p><code>multiprocessing</code>模块是跨平台版本的多进程模块。</p><p><code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"><span class="comment">#子进程要执行的代码</span></span><br><span class="line">def run_proc(name):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Run child process %s (%s)...'</span>%(name, os.getpid()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Parent process %s.'</span>% os.getpid())<span class="comment">#getpid()是获取进程的id号</span></span><br><span class="line">   p = Process(target=run_proc,args=(<span class="string">'test'</span>,))</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Child process will start.'</span>)</span><br><span class="line">   p.start()<span class="comment">#开始进程</span></span><br><span class="line">   p.join()<span class="comment">#等待子进程结束再往下运行，通常用于进程间的同步</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'Child process end'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="进程直接通信"><a href="#进程直接通信" class="headerlink" title="进程直接通信"></a>进程直接通信</h3><blockquote><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p></blockquote><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process,Queue</span><br><span class="line">import os,time,random</span><br><span class="line"></span><br><span class="line"><span class="comment">#写数据进程执行的代码：</span></span><br><span class="line">def write(q):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Process to write:%s'</span>% os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Put %s to queue...'</span>% value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment">#读数据进程执行的代码：</span></span><br><span class="line">def <span class="built_in">read</span>(q):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Process to read:%s'</span>% os.getpid())</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        value = q.get(True)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Get %s from queue.'</span>% value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#父进程创建queue，并传给各个子进程</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write,args=(q,))</span><br><span class="line">    pr = Process(target=<span class="built_in">read</span>,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程pw，写入</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment">#启动子进程pr，读取</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment">#等待pw结束</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment">#pr进程是死循环，无法等待结束，强行终止</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure></p><p><strong>我的理解：</strong></p><p>1.创建了两个进程：Write和Read</p><p>2.Put函数不断向Queue加入数据</p><p>3.get函数其实是阻塞运行，没有读到值，一直阻塞</p><p>4.一旦get读取到Queue里面数据，运行下面的<br><em>print(‘Get %s from queue.’% value)</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt;模块是跨平台版本的多进程模块。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;multiprocessing&lt;/code&gt;模块提供了一个&lt;code&gt;Process&lt;/code&gt;类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from multiprocessing import Process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#子进程要执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def run_proc(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Run child process %s (%s)...&#39;&lt;/span&gt;%(name, os.getpid()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Parent process %s.&#39;&lt;/span&gt;% os.getpid())&lt;span class=&quot;comment&quot;&gt;#getpid()是获取进程的id号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   p = Process(target=run_proc,args=(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Child process will start.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   p.start()&lt;span class=&quot;comment&quot;&gt;#开始进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   p.join()&lt;span class=&quot;comment&quot;&gt;#等待子进程结束再往下运行，通常用于进程间的同步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Child process end&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-IO操作</title>
    <link href="http://hust.life/2017/12/18/tech-2017-12-18-python-io/"/>
    <id>http://hust.life/2017/12/18/tech-2017-12-18-python-io/</id>
    <published>2017-12-18T08:00:00.000Z</published>
    <updated>2017-12-21T16:15:22.899Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件读"><a href="#文件读" class="headerlink" title="文件读"></a>文件读</h3><blockquote><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f = open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">finally:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h3 id="文件写"><a href="#文件写" class="headerlink" title="文件写"></a>文件写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'F:/Codeblock_file/FFT/fangzr.github.io/test.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'Hello,world!'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用with语句来得保险：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'w'</span>) as f:</span><br><span class="line">    f.write(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文件读&quot;&gt;&lt;a href=&quot;#文件读&quot; class=&quot;headerlink&quot; title=&quot;文件读&quot;&gt;&lt;/a&gt;文件读&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论
      
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-try/except/else/finally语句</title>
    <link href="http://hust.life/2017/12/18/tech-2017-12-18-python-try-finally-except/"/>
    <id>http://hust.life/2017/12/18/tech-2017-12-18-python-try-finally-except/</id>
    <published>2017-12-18T08:00:00.000Z</published>
    <updated>2017-12-24T05:42:55.434Z</updated>
    
    <content type="html"><![CDATA[<p>与其他语言相同，在python中，try/except语句主要是用于处理程序正常执行过程中出现的一些异常情况，如语法错误（python作为脚本语言没有编译的环节，在执行过程中对语法进行检测，出错后发出异常消息）、数据除零错误、从未定义的变量上取值等；</p><p>而try/finally语句则主要用于在无论是否发生异常情况，都需要执行一些清理工作的场合，如在通信过程中，无论通信是否发生错误，都需要在通信完成或者发生错误时关闭网络连接。</p><p>尽管try/except和try/finally的作用不同，但是在编程实践中通常可以把它们组合在一起使用try/except/else/finally的形式来实现稳定性和灵活性更好的设计。</p><p>默认情况下，在程序段的执行过程中，如果没有提供try/except的处理，脚本文件执行过程中所产生的异常消息会自动发送给程序调用端，如python shell，而python shell对异常消息的默认处理则是终止程序的执行并打印具体的出错信息。</p><p>这也是在python shell中执行程序错误后所出现的出错打印信息的由来。</p><p>python中try/except/else/finally语句的完整格式如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">     Normal execution block</span><br><span class="line">except A:</span><br><span class="line">     Exception A handle</span><br><span class="line">except B:</span><br><span class="line">     Exception B handle</span><br><span class="line">except:</span><br><span class="line">     Other exception handle</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">if</span> no exception,get here</span><br><span class="line">finally:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">"finally"</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>说明：</p><p>正常执行的程序在try下面的Normal execution block执行块中执行，在执行过程中如果发生了异常，则中断当前在Normal execution block中的执行跳转到对应的异常处理块中开始执行；</p><p>python从第一个except X处开始查找，如果找到了对应的exception类型则进入其提供的exception handle中进行处理，如果没有找到则直接进入except块处进行处理。except块是可选项，如果没有提供，该exception将会被提交给python进行默认处理，处理方式则是终止应用程序并打印提示信息；</p><p>如果在Normal execution block执行块中执行过程中没有发生任何异常，则在执行完Normal execution block后会进入else执行块中（如果存在的话）执行。</p><p>无论是否发生了异常，只要提供了finally语句，以上try/except/else/finally代码块执行的最后一步总是执行finally所对应的代码块。</p><p><strong>需要注意的是：</strong></p><p>1.在上面所示的完整语句中try/except/else/finally所出现的顺序必须是try–&gt;except X–&gt;except–&gt;else–&gt;finally，即所有的except必须在else和finally之前，else（如果有的话）必须在finally之前，而except X必须在except之前。否则会出现语法错误。</p><p>2.对于上面所展示的try/except完整格式而言，else和finally都是可选的，而不是必须的，但是如果存在的话else必须在finally之前，finally（如果存在的话）必须在整个语句的最后位置。</p><p>3.在上面的完整语句中，else语句的存在必须以except X或者except语句为前提，如果在没有except语句的try block中使用else语句会引发语法错误。也就是说else不能与try/finally配合使用。</p><p>4.except的使用要非常小心，慎用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与其他语言相同，在python中，try/except语句主要是用于处理程序正常执行过程中出现的一些异常情况，如语法错误（python作为脚本语言没有编译的环节，在执行过程中对语法进行检测，出错后发出异常消息）、数据除零错误、从未定义的变量上取值等；&lt;/p&gt;
&lt;p&gt;而try/finally语句则主要用于在无论是否发生异常情况，都需要执行一些清理工作的场合，如在通信过程中，无论通信是否发生错误，都需要在通信完成或者发生错误时关闭网络连接。&lt;/p&gt;
&lt;p&gt;尽管try/except和try/finally的作用不同，但是在编程实践中通常可以把它们组合在一起使用try/except/else/finally的形式来实现稳定性和灵活性更好的设计。&lt;/p&gt;
&lt;p&gt;默认情况下，在程序段的执行过程中，如果没有提供try/except的处理，脚本文件执行过程中所产生的异常消息会自动发送给程序调用端，如python shell，而python shell对异常消息的默认处理则是终止程序的执行并打印具体的出错信息。&lt;/p&gt;
&lt;p&gt;这也是在python shell中执行程序错误后所出现的出错打印信息的由来。&lt;/p&gt;
&lt;p&gt;python中try/except/else/finally语句的完整格式如下所示：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Normal execution block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except A:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Exception A handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except B:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Exception B handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;except:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Other exception handle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; no exception,get here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finally:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;finally&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-面向对象高级编程</title>
    <link href="http://hust.life/2017/12/17/tech-2017-12-17-python-Object-oriented-high-level/"/>
    <id>http://hust.life/2017/12/17/tech-2017-12-17-python-Object-oriented-high-level/</id>
    <published>2017-12-17T08:00:00.000Z</published>
    <updated>2017-12-21T16:15:31.046Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-slots"><a href="#使用-slots" class="headerlink" title="使用 slots"></a>使用 <strong>slots</strong></h3><blockquote><p>如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加name和age属性。<br>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<strong>slots</strong>变量，<br>来限制该class实例能添加的属性：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">__slots__ = (<span class="string">'name'</span>,<span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name = <span class="string">'Michael'</span></span><br><span class="line">&gt;&gt;&gt; s.age = 25</span><br><span class="line">&gt;&gt;&gt; s.score = 99</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#6&gt;"</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    s.score = 99</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><h3 id="使用property"><a href="#使用property" class="headerlink" title="使用property"></a>使用property</h3><blockquote><p>@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p></blockquote><p><strong>请利用@property给一个Screen对象加上width和height属性，以及一个只读属性resolution:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Screen(object):</span><br><span class="line">    @property</span><br><span class="line">    def width(self):</span><br><span class="line">        <span class="built_in">return</span> self._width</span><br><span class="line"></span><br><span class="line">    @width.setter</span><br><span class="line">    def width(self,value):</span><br><span class="line">        self._width = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def height(self):</span><br><span class="line">        <span class="built_in">return</span> self._height</span><br><span class="line"></span><br><span class="line">    @height.setter</span><br><span class="line">    def height(self,value):</span><br><span class="line">        self._height = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def resolution(self):</span><br><span class="line">        <span class="built_in">return</span> self._width*self._height</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = 1024</span><br><span class="line">s.height = 768</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'resolution ='</span>, s.resolution)</span><br><span class="line"><span class="keyword">if</span> s.resolution == 786432:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试通过!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试失败!'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用-slots&quot;&gt;&lt;a href=&quot;#使用-slots&quot; class=&quot;headerlink&quot; title=&quot;使用 slots&quot;&gt;&lt;/a&gt;使用 &lt;strong&gt;slots&lt;/strong&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;如果我们想要限制实例的属性怎么办
      
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-面向对象编程概念&amp;Codes</title>
    <link href="http://hust.life/2017/12/16/tech-2017-12-16-python-Object-oriented/"/>
    <id>http://hust.life/2017/12/16/tech-2017-12-16-python-Object-oriented/</id>
    <published>2017-12-16T08:00:00.000Z</published>
    <updated>2017-12-24T05:55:11.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><ul><li><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，<br>比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p></li><li><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<strong>init</strong>方法，在创建实例的时候，就把name，score等属性绑上去：</p></li><li><p>特殊方法“<strong>init</strong>”前后分别有两个下划线！！！</p></li></ul><blockquote><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；<br>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；<br>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name,score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s:%s'</span>%(self.name,self.score))</span><br><span class="line"></span><br><span class="line">    def get_grad(self):</span><br><span class="line">        <span class="keyword">if</span> self.score &gt;=90:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= 60:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> <span class="string">'C'</span></span><br><span class="line">bart = Student(<span class="string">'Jack'</span>,99)</span><br><span class="line">bart.print_score()</span><br><span class="line"><span class="built_in">print</span>(bart.get_grad())</span><br></pre></td></tr></table></figure><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><blockquote><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, gender):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__gender = gender</span><br><span class="line"></span><br><span class="line">    def set_gender(self,gender):</span><br><span class="line">        self.__gender = gender</span><br><span class="line"></span><br><span class="line">    def get_gender(self):</span><br><span class="line">        <span class="built_in">return</span> self.__gender</span><br><span class="line"></span><br><span class="line">bart = Student(<span class="string">'Bart'</span>, <span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bart.get_gender() != <span class="string">'male'</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'测试失败!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    bart.set_gender(<span class="string">'female'</span>)</span><br><span class="line">    <span class="keyword">if</span> bart.get_gender() != <span class="string">'female'</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'测试失败!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'测试成功!'</span>)</span><br></pre></td></tr></table></figure><p><code>results:</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试成功</span><br></pre></td></tr></table></figure></p><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p><strong>鸭子类型</strong></p><blockquote><p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p></blockquote><p>对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</p><p>对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Aminal(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Animal is running...'</span>)</span><br><span class="line">class Dog(Aminal):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Dog is running...'</span>)</span><br><span class="line">class Cat(Aminal):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Cat is running...'</span>)</span><br><span class="line">class Tortoise(Aminal):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'Tortoise is running slowly...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#鸭子类型</span></span><br><span class="line">class Duck(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'这是鸭子类型'</span>)</span><br><span class="line"></span><br><span class="line">def run_twice(Aminal):</span><br><span class="line">    Aminal.run()</span><br><span class="line">    Aminal.run()</span><br><span class="line"><span class="comment">#pass 用法：http://www.cnpythoner.com/post/286.html</span></span><br><span class="line">run_twice(Cat())</span><br><span class="line">run_twice(Tortoise())</span><br><span class="line">run_twice(Duck())</span><br></pre></td></tr></table></figure><p><code>results:</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cat <span class="keyword">is</span> <span class="built_in">running</span>...</span><br><span class="line">Cat <span class="keyword">is</span> <span class="built_in">running</span>...</span><br><span class="line">Tortoise <span class="keyword">is</span> <span class="built_in">running</span> slowly...</span><br><span class="line">Tortoise <span class="keyword">is</span> <span class="built_in">running</span> slowly...</span><br><span class="line">这是鸭子类型</span><br><span class="line">这是鸭子类型</span><br></pre></td></tr></table></figure></p><h3 id="获取对象的信息"><a href="#获取对象的信息" class="headerlink" title="获取对象的信息"></a>获取对象的信息</h3><p>1.Type函数用法</p><p>2.isinstance（）</p><p>3.hasattr() 函数、setattr函数、getattr函数</p><p>仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyObject(object):</span><br><span class="line">...     def __init__(self):</span><br><span class="line">...         self.x = 9</span><br><span class="line">...     def power(self):</span><br><span class="line">...         <span class="built_in">return</span> self.x * self.x</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; obj = MyObject()</span><br><span class="line">紧接着，可以测试该对象的属性：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; hasattr(obj, <span class="string">'x'</span>) <span class="comment"># 有属性'x'吗？</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; obj.x</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; setattr(obj, <span class="string">'y'</span>, 19) <span class="comment"># 设置一个属性'y'</span></span><br><span class="line">&gt;&gt;&gt; hasattr(obj, <span class="string">'y'</span>) <span class="comment"># 有属性'y'吗？</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; getattr(obj, <span class="string">'y'</span>) <span class="comment"># 获取属性'y'</span></span><br><span class="line">19</span><br><span class="line">&gt;&gt;&gt; obj.y <span class="comment"># 获取属性'y'</span></span><br><span class="line">19</span><br></pre></td></tr></table></figure></p><h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><blockquote><p>在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类和实例&quot;&gt;&lt;a href=&quot;#类和实例&quot; class=&quot;headerlink&quot; title=&quot;类和实例&quot;&gt;&lt;/a&gt;类和实例&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，&lt;br&gt;比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的&lt;strong&gt;init&lt;/strong&gt;方法，在创建实例的时候，就把name，score等属性绑上去：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;特殊方法“&lt;strong&gt;init&lt;/strong&gt;”前后分别有两个下划线！！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；&lt;br&gt;方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；&lt;br&gt;通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-生成器</title>
    <link href="http://hust.life/2017/12/14/tech-2017-12-14-python-generator/"/>
    <id>http://hust.life/2017/12/14/tech-2017-12-14-python-generator/</id>
    <published>2017-12-14T08:00:00.000Z</published>
    <updated>2017-12-24T05:50:53.931Z</updated>
    
    <content type="html"><![CDATA[<p>Python使用生成器对延迟操作提供了支持。</p><p>所谓延迟操作，是指在需要的时候才产生结果，而不是立即产生结果。这也是生成器的主要好处。</p><p>生成器函数：常规函数定义，但是，使用yield语句而不是return语句返回结果。yield语句一次返回一个结果，在每个结果中间，挂起函数的状态，以便下次重它离开的地方继续执行</p><p>生成器表达式：类似于列表推导，但是，生成器返回按需产生结果的一个对象，而不是一次构建一个结果列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器例子1</span></span><br><span class="line">def gensquares(N):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        yield i**2</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> gensquares(5):</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><a id="more"></a><p>将推导列表括号换为圆括号，形成生成器表达式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;generator object &lt;genexpr&gt; at 0x042372D0&gt;</span><br><span class="line">&gt;&gt;&gt; next(sq)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(sq)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(sq)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; next(sq)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; next(sq)</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; list(sq)</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; sq = (x**2 <span class="keyword">for</span> x <span class="keyword">in</span> range(5))</span><br><span class="line">&gt;&gt;&gt; list(sq)</span><br><span class="line">[0, 1, 4, 9, 16]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p><strong>生成器唯一要注意的就是，生成器只能遍历一次</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python使用生成器对延迟操作提供了支持。&lt;/p&gt;
&lt;p&gt;所谓延迟操作，是指在需要的时候才产生结果，而不是立即产生结果。这也是生成器的主要好处。&lt;/p&gt;
&lt;p&gt;生成器函数：常规函数定义，但是，使用yield语句而不是return语句返回结果。yield语句一次返回一个结果，在每个结果中间，挂起函数的状态，以便下次重它离开的地方继续执行&lt;/p&gt;
&lt;p&gt;生成器表达式：类似于列表推导，但是，生成器返回按需产生结果的一个对象，而不是一次构建一个结果列表&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成器例子1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def gensquares(N):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(N):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        yield i**2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; gensquares(5):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(item)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://hust.life/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-返回函数</title>
    <link href="http://hust.life/2017/12/14/tech-2017-12-14-python-learn-return-func/"/>
    <id>http://hust.life/2017/12/14/tech-2017-12-14-python-learn-return-func/</id>
    <published>2017-12-14T08:00:00.000Z</published>
    <updated>2017-12-24T05:51:21.838Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def calc_sum(*args):</span><br><span class="line">    ax = 0</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(*args):</span><br><span class="line">        ax = ax + n</span><br><span class="line">    <span class="built_in">return</span> ax</span><br><span class="line"></span><br><span class="line">i=calc_sum(101)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>函数作为返回值，不返回求和的结果，而是返回求和的函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def lazy_sum(*args):</span><br><span class="line">    def sum():</span><br><span class="line">        ax = 0</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="built_in">return</span> ax</span><br><span class="line">    <span class="built_in">return</span> sum</span><br><span class="line"></span><br><span class="line">f = lazy_sum(1,3,5,7,9)</span><br><span class="line"></span><br><span class="line">i=f()</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></p><p>结果为25</p><a id="more"></a><blockquote><p>在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def count():</span><br><span class="line">    def f(j):</span><br><span class="line">        def g():</span><br><span class="line">            <span class="built_in">return</span> j*j</span><br><span class="line">        <span class="built_in">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(1,4):</span><br><span class="line">        fs.append(f(i)) <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="built_in">return</span> fs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def calc_sum(*args):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(*args):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ax = ax + n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i=calc_sum(101)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数作为返回值，不返回求和的结果，而是返回求和的函数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def lazy_sum(*args):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def sum():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ax = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; args:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ax = ax + n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; sum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = lazy_sum(1,3,5,7,9)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i=f()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(i)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果为25&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://hust.life/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>圆脸少女们</title>
    <link href="http://hust.life/2017/12/14/life-2017-12-14-painting/"/>
    <id>http://hust.life/2017/12/14/life-2017-12-14-painting/</id>
    <published>2017-12-14T08:00:00.000Z</published>
    <updated>2017-12-24T05:49:59.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在生活中总有一些早就应该去做却一直拖着不去做的事情,尽管这些事情已经影响了我们的生活,<br>但我们总是有一个借口:没有时间,以后再做。其实,这些想做的事,如果你马上动手去做了,你的生活<br>反而会变得豁然开朗。</p></blockquote><a id="more"></a><p>我从小喜爱绘画，尤其是喜爱漫画。也曾经上过几年素描培训班，但是上了初中之后，兴趣与学业发生冲突，不得不放弃漫画。</p><p>与其让自己沉迷游戏、无聊的娱乐视频。不如用编程学习、体育锻炼、绘画来充实自己。看到自己画的人物栩栩如生地出现在画纸，颇有一番得意呢。</p><p>当然，我不能忘记，自己的主要任务还是学习。周六就要考六级英语了，这次听力要多加练习，多背几篇作文。Python也要加把劲，早日完成课程设计。</p><h2 id="一个活泼的少女像"><a href="#一个活泼的少女像" class="headerlink" title="一个活泼的少女像"></a>一个活泼的少女像</h2><p><img src="http://p0xt50lze.bkt.clouddn.com/17-12-14/57536313.jpg" alt=""></p><h2 id="圆脸可爱少女（1）"><a href="#圆脸可爱少女（1）" class="headerlink" title="圆脸可爱少女（1）"></a>圆脸可爱少女（1）</h2><blockquote><p>圆脸的线条平滑柔和，使角色看起来年级较小，给人单纯、可爱的印象。圆脸一般用来塑造性格纯朴开朗的萌美少女角色。</p></blockquote><p><img src="http://p0xt50lze.bkt.clouddn.com/17-12-14/73290488.jpg" alt=""></p><h2 id="圆脸少女（2）"><a href="#圆脸少女（2）" class="headerlink" title="圆脸少女（2）"></a>圆脸少女（2）</h2><p> 这是我喜欢的女生发型之一，给人一种活泼却不失成熟的感觉</p><p><img src="http://p0xt50lze.bkt.clouddn.com/17-12-17/38310361.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们在生活中总有一些早就应该去做却一直拖着不去做的事情,尽管这些事情已经影响了我们的生活,&lt;br&gt;但我们总是有一个借口:没有时间,以后再做。其实,这些想做的事,如果你马上动手去做了,你的生活&lt;br&gt;反而会变得豁然开朗。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="绘画" scheme="http://hust.life/categories/%E7%BB%98%E7%94%BB/"/>
    
    
      <category term="素描" scheme="http://hust.life/tags/%E7%B4%A0%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python学习-map与reduce函数</title>
    <link href="http://hust.life/2017/12/13/tech-2017-12-13-python-learn-map-reduce/"/>
    <id>http://hust.life/2017/12/13/tech-2017-12-13-python-learn-map-reduce/</id>
    <published>2017-12-13T08:00:00.000Z</published>
    <updated>2017-12-21T16:16:09.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>reduce() 函数会对参数序列中元素进行累积。<br>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给reduce中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。<br>map() 会根据提供的函数对指定序列做映射。<br>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。<br>`<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x,y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x*<span class="number">10</span>+y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'0'</span>:<span class="number">0</span>,<span class="string">'1'</span>:<span class="number">1</span>,<span class="string">'2'</span>:<span class="number">2</span>,<span class="string">'3'</span>:<span class="number">3</span>,<span class="string">'4'</span>:<span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</span><br><span class="line">    <span class="keyword">return</span> (reduce(fn, map(char2num,s)))</span><br><span class="line">print(str2int(<span class="string">"1545645"</span>))</span><br></pre></td></tr></table></figure></p></blockquote><p>##注意调用reduce函数之前写上：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;reduce() 函数会对参数序列中元素进行累积。&lt;br&gt;函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给reduce中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 fu
      
    
    </summary>
    
      <category term="技术" scheme="http://hust.life/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://hust.life/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FPGA学习-FPGA小数乘法</title>
    <link href="http://hust.life/2017/12/12/tech-2017-12-12-FPGA-small-num/"/>
    <id>http://hust.life/2017/12/12/tech-2017-12-12-FPGA-small-num/</id>
    <published>2017-12-12T08:00:00.000Z</published>
    <updated>2017-12-24T05:45:37.279Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>经常有人问, fpga里小数乘法怎么搞?</p></blockquote><p>  如果你乐意, 按照IEEE754标准做”浮点”型运算的ip当然最好(虽然面积上不太好).<br>不过,很多情况下,没有这个必要.</p><p>  一般我们就用”定点”了.<br>你得自己”定个点”, 比如用16位, 分成8位整数8位小数(后面记为”(8.8)”), 即”定点”在第8位.<br>那么:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 16<span class="string">'h0100;</span></span><br><span class="line"><span class="string">1.5 -&gt; 16'</span>h0180;</span><br><span class="line">-1.5 -&gt; -1.5*256 + 65536(补码) -&gt; 16<span class="string">'hFE80(其实就是-16'</span>sh0180, 让综合器给我们算补码去~~);</span><br><span class="line">...</span><br><span class="line">1.164 -&gt; 1.164*256 = 298 = 16<span class="string">'h012A;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>  所以 signed input [15:0] a (也是”8整.8小”)和 1.164相乘给 signed output [15:0] mul (也是”8整.8小”), 直接写:<br>assign mul = (a * 16’sh012A) &gt;&gt;&gt;8;<br>就行了, 当然, 你的fpga里有dsp block最好, 不然也要几百个LE的.</p><p>  因为 (8.8) 乘  (8.8) 得到  (16.16), 为了恢复成 (8.8), 所以帯符号右移8位即可.<br>把低8位小数舍掉, 高8位整数也丢了, 所以你得保证你的16位(8.8)的”定点小数”乘积不能超过范围, 多数数字信号处理系数都是区间[-1.0, 1.0]的,多半不存在问题, 积分什么的, 还有其它可能有问题的自己想清楚就行, 当然你要保留16位整.16位小也可以~~~</p><p>总结:<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> fixpmul</span><br><span class="line">#(</span><br><span class="line">    <span class="keyword">parameter</span> IW = <span class="number">8</span>,</span><br><span class="line">    <span class="keyword">parameter</span> FW = <span class="number">8</span> </span><br><span class="line">)(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">signed</span> [IW+FW-<span class="number">1</span> : <span class="number">0</span>] a,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">signed</span> [IW+FW-<span class="number">1</span> : <span class="number">0</span>] b,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">signed</span> [IW+FW-<span class="number">1</span> : <span class="number">0</span>] o</span><br><span class="line">);</span><br><span class="line">    (* multstyle = <span class="string">"dsp"</span> *) <span class="keyword">wire</span> <span class="keyword">signed</span> [IW*<span class="number">2</span>+FW*<span class="number">2</span>-<span class="number">1</span> : <span class="number">0</span>] long;</span><br><span class="line">    <span class="keyword">assign</span> long = a * b;</span><br><span class="line">    <span class="keyword">assign</span> o = long &gt;&gt;&gt; FW;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></p><p>PS: 作为一个完美主义者的想法: 以8位整型为例, 其实 8位有符号 乘 8位有符号得到的 16位有符号, 中的第14位(权2^14的位, 符号位右边的位), 很讨厌, 它只有在 -128 <em> -128时才等于1, 其它65535种情况, 全是0, 很浪费.<br>所以我们一般在数字信号处理系统中, 永远把[-1,1]映射到[-127,127], 这样那个讨厌的第14位永远用不到, 然后就可以: wire signed [15:0] mul = a </em> b; wire signed [14:0] out = {wire[15], wire[13:0]}, 8位有符号 乘 8位有符号 得到 15位有符号, 节约一位.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;经常有人问, fpga里小数乘法怎么搞?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  如果你乐意, 按照IEEE754标准做”浮点”型运算的ip当然最好(虽然面积上不太好).&lt;br&gt;不过,很多情况下,没有这个必要.&lt;/p&gt;
&lt;p&gt;  一般我们就用”定点”了.&lt;br&gt;你得自己”定个点”, 比如用16位, 分成8位整数8位小数(后面记为”(8.8)”), 即”定点”在第8位.&lt;br&gt;那么:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 -&amp;gt; 16&lt;span class=&quot;string&quot;&gt;&#39;h0100;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;1.5 -&amp;gt; 16&#39;&lt;/span&gt;h0180;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1.5 -&amp;gt; -1.5*256 + 65536(补码) -&amp;gt; 16&lt;span class=&quot;string&quot;&gt;&#39;hFE80(其实就是-16&#39;&lt;/span&gt;sh0180, 让综合器给我们算补码去~~);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.164 -&amp;gt; 1.164*256 = 298 = 16&lt;span class=&quot;string&quot;&gt;&#39;h012A;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="FPGA" scheme="http://hust.life/categories/FPGA/"/>
    
    
      <category term="FPGA" scheme="http://hust.life/tags/FPGA/"/>
    
  </entry>
  
</feed>
